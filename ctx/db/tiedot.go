package db

import (
	"context"
	"fmt"
	"io/ioutil"
	"os"

	tdb "github.com/HouzuoGuo/tiedot/db"
	_ "github.com/go-sql-driver/mysql"
	_ "github.com/mattn/go-sqlite3"
)

type diedotKey int

var key diedotKey = 1

// FromContext
func FromContext(c context.Context) *tdb.DB {
	store, ok := c.Value(key).(*tdb.DB)
	if !ok {
		panic(fmt.Errorf("no db in the app context"))
	}
	return store
}

type DBConfig struct {
	DBDirPath string `yaml:db_path:`
}

// WithContext graphdb generated by this function waits <- c.Done() so parent context passed to this func as parameter shuld be cancelable and should cancel() called at app will be shutdown.
func WithContext(c context.Context, conf DBConfig) (context.Context, error) {
	dbDirPath := conf.DBDirPath
	if len(dbDirPath) == 0 {
		var err error
		dbDirPath, err = ioutil.TempDir("", "chaindb")
		if err != nil {
			return c, err
		}
	}

	db, err := tdb.OpenDB(dbDirPath)

	c = context.WithValue(c, key, db)

	closeFunc := func() error {
		db.Close()
		os.RemoveAll(dbDirPath)
		return err
	}

	go func() {
		select {
		case <-c.Done():
			closeFunc()
		}
	}()

	return c, nil
}
