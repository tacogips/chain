package graphdb

import (
	"context"
	"fmt"

	"github.com/cayleygraph/cayley"
	_ "github.com/go-sql-driver/mysql"
	_ "github.com/mattn/go-sqlite3"
)

type cayleyKey int

var key cayleyKey = 1

// FromContext
func FromContext(c context.Context) *cayley.Handle {
	store, ok := c.Value(key).(*cayley.Handle)
	if !ok {
		panic(fmt.Errorf("no db store in the context "))
	}
	return store
}

// WithContext graphdb generated by this function waits <- c.Done() so parent context passed to this func as parameter shuld be cancelable and should cancel() called at app will be shutdown.
func WithContext(c context.Context) (context.Context, error) {
	// TODO tacogips tobe choicable another db bolts db for example.
	store, err := cayley.NewMemoryGraph()
	if err != nil {
		return c, err
	}

	c = context.WithValue(c, key, store)

	closeFunc := func() error {
		err := store.Close()
		return err
	}

	go func() {
		select {
		case <-c.Done():
			closeFunc()
		}
	}()

	return c, nil
}
