/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var github_com_gogo_protobuf_gogoproto_gogo_pb = require('./github.com/gogo/protobuf/gogoproto/gogo_pb.js');
var google_protobuf_duration_pb = require('google-protobuf/google/protobuf/duration_pb.js');
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.exportSymbol('proto.erd.Activity', null, global);
goog.exportSymbol('proto.erd.Column', null, global);
goog.exportSymbol('proto.erd.ColumnType', null, global);
goog.exportSymbol('proto.erd.Coord', null, global);
goog.exportSymbol('proto.erd.CoordWH', null, global);
goog.exportSymbol('proto.erd.Empty', null, global);
goog.exportSymbol('proto.erd.Entity', null, global);
goog.exportSymbol('proto.erd.EntityColumnAttributes', null, global);
goog.exportSymbol('proto.erd.EnumColumnAttribute', null, global);
goog.exportSymbol('proto.erd.Move', null, global);
goog.exportSymbol('proto.erd.NumberColumnAttribute', null, global);
goog.exportSymbol('proto.erd.Order', null, global);
goog.exportSymbol('proto.erd.Rel', null, global);
goog.exportSymbol('proto.erd.RelPoint', null, global);
goog.exportSymbol('proto.erd.RelPoint.Associate', null, global);
goog.exportSymbol('proto.erd.RelationAttribute', null, global);
goog.exportSymbol('proto.erd.StringColumnAttribute', null, global);
goog.exportSymbol('proto.erd.Transform', null, global);
goog.exportSymbol('proto.erd.WidthHeight', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.erd.Coord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.erd.Coord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.erd.Coord.displayName = 'proto.erd.Coord';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.erd.Coord.prototype.toObject = function(opt_includeInstance) {
  return proto.erd.Coord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.erd.Coord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.erd.Coord.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    y: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.erd.Coord}
 */
proto.erd.Coord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.erd.Coord;
  return proto.erd.Coord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.erd.Coord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.erd.Coord}
 */
proto.erd.Coord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.erd.Coord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.erd.Coord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.erd.Coord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.erd.Coord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double x = 1;
 * @return {number}
 */
proto.erd.Coord.prototype.getX = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.erd.Coord.prototype.setX = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional double y = 2;
 * @return {number}
 */
proto.erd.Coord.prototype.getY = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.erd.Coord.prototype.setY = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.erd.WidthHeight = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.erd.WidthHeight, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.erd.WidthHeight.displayName = 'proto.erd.WidthHeight';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.erd.WidthHeight.prototype.toObject = function(opt_includeInstance) {
  return proto.erd.WidthHeight.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.erd.WidthHeight} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.erd.WidthHeight.toObject = function(includeInstance, msg) {
  var f, obj = {
    w: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    h: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.erd.WidthHeight}
 */
proto.erd.WidthHeight.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.erd.WidthHeight;
  return proto.erd.WidthHeight.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.erd.WidthHeight} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.erd.WidthHeight}
 */
proto.erd.WidthHeight.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setW(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setH(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.erd.WidthHeight.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.erd.WidthHeight.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.erd.WidthHeight} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.erd.WidthHeight.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getW();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getH();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double w = 1;
 * @return {number}
 */
proto.erd.WidthHeight.prototype.getW = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.erd.WidthHeight.prototype.setW = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional double h = 2;
 * @return {number}
 */
proto.erd.WidthHeight.prototype.getH = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.erd.WidthHeight.prototype.setH = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.erd.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.erd.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.erd.Empty.displayName = 'proto.erd.Empty';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.erd.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.erd.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.erd.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.erd.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.erd.Empty}
 */
proto.erd.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.erd.Empty;
  return proto.erd.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.erd.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.erd.Empty}
 */
proto.erd.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.erd.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.erd.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.erd.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.erd.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.erd.Entity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.erd.Entity.repeatedFields_, null);
};
goog.inherits(proto.erd.Entity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.erd.Entity.displayName = 'proto.erd.Entity';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.erd.Entity.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.erd.Entity.prototype.toObject = function(opt_includeInstance) {
  return proto.erd.Entity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.erd.Entity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.erd.Entity.toObject = function(includeInstance, msg) {
  var f, obj = {
    objectId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    coord: (f = msg.getCoord()) && proto.erd.Coord.toObject(includeInstance, f),
    widthHeight: (f = msg.getWidthHeight()) && proto.erd.WidthHeight.toObject(includeInstance, f),
    color: jspb.Message.getFieldWithDefault(msg, 5, ""),
    columnsList: jspb.Message.toObjectList(msg.getColumnsList(),
    proto.erd.Column.toObject, includeInstance),
    depth: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.erd.Entity}
 */
proto.erd.Entity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.erd.Entity;
  return proto.erd.Entity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.erd.Entity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.erd.Entity}
 */
proto.erd.Entity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setObjectId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.erd.Coord;
      reader.readMessage(value,proto.erd.Coord.deserializeBinaryFromReader);
      msg.setCoord(value);
      break;
    case 4:
      var value = new proto.erd.WidthHeight;
      reader.readMessage(value,proto.erd.WidthHeight.deserializeBinaryFromReader);
      msg.setWidthHeight(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    case 6:
      var value = new proto.erd.Column;
      reader.readMessage(value,proto.erd.Column.deserializeBinaryFromReader);
      msg.addColumns(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDepth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.erd.Entity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.erd.Entity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.erd.Entity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.erd.Entity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjectId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCoord();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.erd.Coord.serializeBinaryToWriter
    );
  }
  f = message.getWidthHeight();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.erd.WidthHeight.serializeBinaryToWriter
    );
  }
  f = message.getColor();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getColumnsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.erd.Column.serializeBinaryToWriter
    );
  }
  f = message.getDepth();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * optional string object_id = 1;
 * @return {string}
 */
proto.erd.Entity.prototype.getObjectId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.erd.Entity.prototype.setObjectId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.erd.Entity.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.erd.Entity.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional Coord coord = 3;
 * @return {?proto.erd.Coord}
 */
proto.erd.Entity.prototype.getCoord = function() {
  return /** @type{?proto.erd.Coord} */ (
    jspb.Message.getWrapperField(this, proto.erd.Coord, 3));
};


/** @param {?proto.erd.Coord|undefined} value */
proto.erd.Entity.prototype.setCoord = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.erd.Entity.prototype.clearCoord = function() {
  this.setCoord(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.erd.Entity.prototype.hasCoord = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional WidthHeight width_height = 4;
 * @return {?proto.erd.WidthHeight}
 */
proto.erd.Entity.prototype.getWidthHeight = function() {
  return /** @type{?proto.erd.WidthHeight} */ (
    jspb.Message.getWrapperField(this, proto.erd.WidthHeight, 4));
};


/** @param {?proto.erd.WidthHeight|undefined} value */
proto.erd.Entity.prototype.setWidthHeight = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.erd.Entity.prototype.clearWidthHeight = function() {
  this.setWidthHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.erd.Entity.prototype.hasWidthHeight = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string color = 5;
 * @return {string}
 */
proto.erd.Entity.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.erd.Entity.prototype.setColor = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * repeated Column columns = 6;
 * @return {!Array.<!proto.erd.Column>}
 */
proto.erd.Entity.prototype.getColumnsList = function() {
  return /** @type{!Array.<!proto.erd.Column>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.erd.Column, 6));
};


/** @param {!Array.<!proto.erd.Column>} value */
proto.erd.Entity.prototype.setColumnsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.erd.Column=} opt_value
 * @param {number=} opt_index
 * @return {!proto.erd.Column}
 */
proto.erd.Entity.prototype.addColumns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.erd.Column, opt_index);
};


proto.erd.Entity.prototype.clearColumnsList = function() {
  this.setColumnsList([]);
};


/**
 * optional int32 depth = 7;
 * @return {number}
 */
proto.erd.Entity.prototype.getDepth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.erd.Entity.prototype.setDepth = function(value) {
  jspb.Message.setField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.erd.Column = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.erd.Column, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.erd.Column.displayName = 'proto.erd.Column';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.erd.Column.prototype.toObject = function(opt_includeInstance) {
  return proto.erd.Column.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.erd.Column} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.erd.Column.toObject = function(includeInstance, msg) {
  var f, obj = {
    objectId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    attrs: (f = msg.getAttrs()) && proto.erd.EntityColumnAttributes.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.erd.Column}
 */
proto.erd.Column.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.erd.Column;
  return proto.erd.Column.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.erd.Column} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.erd.Column}
 */
proto.erd.Column.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setObjectId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {!proto.erd.ColumnType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = new proto.erd.EntityColumnAttributes;
      reader.readMessage(value,proto.erd.EntityColumnAttributes.deserializeBinaryFromReader);
      msg.setAttrs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.erd.Column.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.erd.Column.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.erd.Column} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.erd.Column.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjectId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getAttrs();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.erd.EntityColumnAttributes.serializeBinaryToWriter
    );
  }
};


/**
 * optional string object_id = 1;
 * @return {string}
 */
proto.erd.Column.prototype.getObjectId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.erd.Column.prototype.setObjectId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.erd.Column.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.erd.Column.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional ColumnType type = 3;
 * @return {!proto.erd.ColumnType}
 */
proto.erd.Column.prototype.getType = function() {
  return /** @type {!proto.erd.ColumnType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.erd.ColumnType} value */
proto.erd.Column.prototype.setType = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional EntityColumnAttributes attrs = 4;
 * @return {?proto.erd.EntityColumnAttributes}
 */
proto.erd.Column.prototype.getAttrs = function() {
  return /** @type{?proto.erd.EntityColumnAttributes} */ (
    jspb.Message.getWrapperField(this, proto.erd.EntityColumnAttributes, 4));
};


/** @param {?proto.erd.EntityColumnAttributes|undefined} value */
proto.erd.Column.prototype.setAttrs = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.erd.Column.prototype.clearAttrs = function() {
  this.setAttrs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.erd.Column.prototype.hasAttrs = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.erd.EntityColumnAttributes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.erd.EntityColumnAttributes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.erd.EntityColumnAttributes.displayName = 'proto.erd.EntityColumnAttributes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.erd.EntityColumnAttributes.prototype.toObject = function(opt_includeInstance) {
  return proto.erd.EntityColumnAttributes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.erd.EntityColumnAttributes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.erd.EntityColumnAttributes.toObject = function(includeInstance, msg) {
  var f, obj = {
    attrEnum: (f = msg.getAttrEnum()) && proto.erd.EnumColumnAttribute.toObject(includeInstance, f),
    attrNumber: (f = msg.getAttrNumber()) && proto.erd.NumberColumnAttribute.toObject(includeInstance, f),
    attrString: (f = msg.getAttrString()) && proto.erd.StringColumnAttribute.toObject(includeInstance, f),
    isFk: jspb.Message.getFieldWithDefault(msg, 4, false),
    isPk: jspb.Message.getFieldWithDefault(msg, 5, false),
    isUnique: jspb.Message.getFieldWithDefault(msg, 6, false),
    isNotNull: jspb.Message.getFieldWithDefault(msg, 7, false),
    isAutoIncrement: jspb.Message.getFieldWithDefault(msg, 8, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.erd.EntityColumnAttributes}
 */
proto.erd.EntityColumnAttributes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.erd.EntityColumnAttributes;
  return proto.erd.EntityColumnAttributes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.erd.EntityColumnAttributes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.erd.EntityColumnAttributes}
 */
proto.erd.EntityColumnAttributes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.erd.EnumColumnAttribute;
      reader.readMessage(value,proto.erd.EnumColumnAttribute.deserializeBinaryFromReader);
      msg.setAttrEnum(value);
      break;
    case 2:
      var value = new proto.erd.NumberColumnAttribute;
      reader.readMessage(value,proto.erd.NumberColumnAttribute.deserializeBinaryFromReader);
      msg.setAttrNumber(value);
      break;
    case 3:
      var value = new proto.erd.StringColumnAttribute;
      reader.readMessage(value,proto.erd.StringColumnAttribute.deserializeBinaryFromReader);
      msg.setAttrString(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsFk(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsPk(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsUnique(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsNotNull(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsAutoIncrement(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.erd.EntityColumnAttributes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.erd.EntityColumnAttributes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.erd.EntityColumnAttributes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.erd.EntityColumnAttributes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttrEnum();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.erd.EnumColumnAttribute.serializeBinaryToWriter
    );
  }
  f = message.getAttrNumber();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.erd.NumberColumnAttribute.serializeBinaryToWriter
    );
  }
  f = message.getAttrString();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.erd.StringColumnAttribute.serializeBinaryToWriter
    );
  }
  f = message.getIsFk();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getIsPk();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getIsUnique();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getIsNotNull();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getIsAutoIncrement();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * optional EnumColumnAttribute attr_enum = 1;
 * @return {?proto.erd.EnumColumnAttribute}
 */
proto.erd.EntityColumnAttributes.prototype.getAttrEnum = function() {
  return /** @type{?proto.erd.EnumColumnAttribute} */ (
    jspb.Message.getWrapperField(this, proto.erd.EnumColumnAttribute, 1));
};


/** @param {?proto.erd.EnumColumnAttribute|undefined} value */
proto.erd.EntityColumnAttributes.prototype.setAttrEnum = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.erd.EntityColumnAttributes.prototype.clearAttrEnum = function() {
  this.setAttrEnum(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.erd.EntityColumnAttributes.prototype.hasAttrEnum = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional NumberColumnAttribute attr_number = 2;
 * @return {?proto.erd.NumberColumnAttribute}
 */
proto.erd.EntityColumnAttributes.prototype.getAttrNumber = function() {
  return /** @type{?proto.erd.NumberColumnAttribute} */ (
    jspb.Message.getWrapperField(this, proto.erd.NumberColumnAttribute, 2));
};


/** @param {?proto.erd.NumberColumnAttribute|undefined} value */
proto.erd.EntityColumnAttributes.prototype.setAttrNumber = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.erd.EntityColumnAttributes.prototype.clearAttrNumber = function() {
  this.setAttrNumber(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.erd.EntityColumnAttributes.prototype.hasAttrNumber = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional StringColumnAttribute attr_string = 3;
 * @return {?proto.erd.StringColumnAttribute}
 */
proto.erd.EntityColumnAttributes.prototype.getAttrString = function() {
  return /** @type{?proto.erd.StringColumnAttribute} */ (
    jspb.Message.getWrapperField(this, proto.erd.StringColumnAttribute, 3));
};


/** @param {?proto.erd.StringColumnAttribute|undefined} value */
proto.erd.EntityColumnAttributes.prototype.setAttrString = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.erd.EntityColumnAttributes.prototype.clearAttrString = function() {
  this.setAttrString(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.erd.EntityColumnAttributes.prototype.hasAttrString = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool is_fk = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.erd.EntityColumnAttributes.prototype.getIsFk = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.erd.EntityColumnAttributes.prototype.setIsFk = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bool is_pk = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.erd.EntityColumnAttributes.prototype.getIsPk = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.erd.EntityColumnAttributes.prototype.setIsPk = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bool is_unique = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.erd.EntityColumnAttributes.prototype.getIsUnique = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.erd.EntityColumnAttributes.prototype.setIsUnique = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional bool is_not_null = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.erd.EntityColumnAttributes.prototype.getIsNotNull = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.erd.EntityColumnAttributes.prototype.setIsNotNull = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional bool is_auto_increment = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.erd.EntityColumnAttributes.prototype.getIsAutoIncrement = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.erd.EntityColumnAttributes.prototype.setIsAutoIncrement = function(value) {
  jspb.Message.setField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.erd.EnumColumnAttribute = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.erd.EnumColumnAttribute.repeatedFields_, null);
};
goog.inherits(proto.erd.EnumColumnAttribute, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.erd.EnumColumnAttribute.displayName = 'proto.erd.EnumColumnAttribute';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.erd.EnumColumnAttribute.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.erd.EnumColumnAttribute.prototype.toObject = function(opt_includeInstance) {
  return proto.erd.EnumColumnAttribute.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.erd.EnumColumnAttribute} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.erd.EnumColumnAttribute.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.getRepeatedField(msg, 1),
    defaultValue: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.erd.EnumColumnAttribute}
 */
proto.erd.EnumColumnAttribute.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.erd.EnumColumnAttribute;
  return proto.erd.EnumColumnAttribute.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.erd.EnumColumnAttribute} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.erd.EnumColumnAttribute}
 */
proto.erd.EnumColumnAttribute.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addValues(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefaultValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.erd.EnumColumnAttribute.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.erd.EnumColumnAttribute.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.erd.EnumColumnAttribute} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.erd.EnumColumnAttribute.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getDefaultValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated string values = 1;
 * @return {!Array.<string>}
 */
proto.erd.EnumColumnAttribute.prototype.getValuesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<string>} value */
proto.erd.EnumColumnAttribute.prototype.setValuesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.erd.EnumColumnAttribute.prototype.addValues = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.erd.EnumColumnAttribute.prototype.clearValuesList = function() {
  this.setValuesList([]);
};


/**
 * optional string default_value = 2;
 * @return {string}
 */
proto.erd.EnumColumnAttribute.prototype.getDefaultValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.erd.EnumColumnAttribute.prototype.setDefaultValue = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.erd.StringColumnAttribute = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.erd.StringColumnAttribute, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.erd.StringColumnAttribute.displayName = 'proto.erd.StringColumnAttribute';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.erd.StringColumnAttribute.prototype.toObject = function(opt_includeInstance) {
  return proto.erd.StringColumnAttribute.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.erd.StringColumnAttribute} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.erd.StringColumnAttribute.toObject = function(includeInstance, msg) {
  var f, obj = {
    length: jspb.Message.getFieldWithDefault(msg, 1, 0),
    defaultValue: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.erd.StringColumnAttribute}
 */
proto.erd.StringColumnAttribute.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.erd.StringColumnAttribute;
  return proto.erd.StringColumnAttribute.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.erd.StringColumnAttribute} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.erd.StringColumnAttribute}
 */
proto.erd.StringColumnAttribute.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLength(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefaultValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.erd.StringColumnAttribute.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.erd.StringColumnAttribute.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.erd.StringColumnAttribute} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.erd.StringColumnAttribute.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLength();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getDefaultValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 length = 1;
 * @return {number}
 */
proto.erd.StringColumnAttribute.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.erd.StringColumnAttribute.prototype.setLength = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string default_value = 2;
 * @return {string}
 */
proto.erd.StringColumnAttribute.prototype.getDefaultValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.erd.StringColumnAttribute.prototype.setDefaultValue = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.erd.NumberColumnAttribute = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.erd.NumberColumnAttribute, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.erd.NumberColumnAttribute.displayName = 'proto.erd.NumberColumnAttribute';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.erd.NumberColumnAttribute.prototype.toObject = function(opt_includeInstance) {
  return proto.erd.NumberColumnAttribute.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.erd.NumberColumnAttribute} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.erd.NumberColumnAttribute.toObject = function(includeInstance, msg) {
  var f, obj = {
    length: jspb.Message.getFieldWithDefault(msg, 1, 0),
    decimal: jspb.Message.getFieldWithDefault(msg, 2, 0),
    isUnsigned: jspb.Message.getFieldWithDefault(msg, 3, false),
    defaultValue: +jspb.Message.getFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.erd.NumberColumnAttribute}
 */
proto.erd.NumberColumnAttribute.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.erd.NumberColumnAttribute;
  return proto.erd.NumberColumnAttribute.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.erd.NumberColumnAttribute} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.erd.NumberColumnAttribute}
 */
proto.erd.NumberColumnAttribute.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLength(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDecimal(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsUnsigned(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDefaultValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.erd.NumberColumnAttribute.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.erd.NumberColumnAttribute.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.erd.NumberColumnAttribute} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.erd.NumberColumnAttribute.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLength();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getDecimal();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getIsUnsigned();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getDefaultValue();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional int32 length = 1;
 * @return {number}
 */
proto.erd.NumberColumnAttribute.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.erd.NumberColumnAttribute.prototype.setLength = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 decimal = 2;
 * @return {number}
 */
proto.erd.NumberColumnAttribute.prototype.getDecimal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.erd.NumberColumnAttribute.prototype.setDecimal = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bool is_unsigned = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.erd.NumberColumnAttribute.prototype.getIsUnsigned = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.erd.NumberColumnAttribute.prototype.setIsUnsigned = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional double default_value = 4;
 * @return {number}
 */
proto.erd.NumberColumnAttribute.prototype.getDefaultValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.erd.NumberColumnAttribute.prototype.setDefaultValue = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.erd.Rel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.erd.Rel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.erd.Rel.displayName = 'proto.erd.Rel';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.erd.Rel.prototype.toObject = function(opt_includeInstance) {
  return proto.erd.Rel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.erd.Rel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.erd.Rel.toObject = function(includeInstance, msg) {
  var f, obj = {
    objectId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pointBegin: (f = msg.getPointBegin()) && proto.erd.RelPoint.toObject(includeInstance, f),
    pointEnd: (f = msg.getPointEnd()) && proto.erd.RelPoint.toObject(includeInstance, f),
    attribute: (f = msg.getAttribute()) && proto.erd.RelationAttribute.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.erd.Rel}
 */
proto.erd.Rel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.erd.Rel;
  return proto.erd.Rel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.erd.Rel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.erd.Rel}
 */
proto.erd.Rel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setObjectId(value);
      break;
    case 2:
      var value = new proto.erd.RelPoint;
      reader.readMessage(value,proto.erd.RelPoint.deserializeBinaryFromReader);
      msg.setPointBegin(value);
      break;
    case 3:
      var value = new proto.erd.RelPoint;
      reader.readMessage(value,proto.erd.RelPoint.deserializeBinaryFromReader);
      msg.setPointEnd(value);
      break;
    case 4:
      var value = new proto.erd.RelationAttribute;
      reader.readMessage(value,proto.erd.RelationAttribute.deserializeBinaryFromReader);
      msg.setAttribute(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.erd.Rel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.erd.Rel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.erd.Rel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.erd.Rel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjectId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPointBegin();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.erd.RelPoint.serializeBinaryToWriter
    );
  }
  f = message.getPointEnd();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.erd.RelPoint.serializeBinaryToWriter
    );
  }
  f = message.getAttribute();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.erd.RelationAttribute.serializeBinaryToWriter
    );
  }
};


/**
 * optional string object_id = 1;
 * @return {string}
 */
proto.erd.Rel.prototype.getObjectId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.erd.Rel.prototype.setObjectId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional RelPoint point_begin = 2;
 * @return {?proto.erd.RelPoint}
 */
proto.erd.Rel.prototype.getPointBegin = function() {
  return /** @type{?proto.erd.RelPoint} */ (
    jspb.Message.getWrapperField(this, proto.erd.RelPoint, 2));
};


/** @param {?proto.erd.RelPoint|undefined} value */
proto.erd.Rel.prototype.setPointBegin = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.erd.Rel.prototype.clearPointBegin = function() {
  this.setPointBegin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.erd.Rel.prototype.hasPointBegin = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RelPoint point_end = 3;
 * @return {?proto.erd.RelPoint}
 */
proto.erd.Rel.prototype.getPointEnd = function() {
  return /** @type{?proto.erd.RelPoint} */ (
    jspb.Message.getWrapperField(this, proto.erd.RelPoint, 3));
};


/** @param {?proto.erd.RelPoint|undefined} value */
proto.erd.Rel.prototype.setPointEnd = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.erd.Rel.prototype.clearPointEnd = function() {
  this.setPointEnd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.erd.Rel.prototype.hasPointEnd = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional RelationAttribute attribute = 4;
 * @return {?proto.erd.RelationAttribute}
 */
proto.erd.Rel.prototype.getAttribute = function() {
  return /** @type{?proto.erd.RelationAttribute} */ (
    jspb.Message.getWrapperField(this, proto.erd.RelationAttribute, 4));
};


/** @param {?proto.erd.RelationAttribute|undefined} value */
proto.erd.Rel.prototype.setAttribute = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.erd.Rel.prototype.clearAttribute = function() {
  this.setAttribute(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.erd.Rel.prototype.hasAttribute = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.erd.RelPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.erd.RelPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.erd.RelPoint.displayName = 'proto.erd.RelPoint';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.erd.RelPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.erd.RelPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.erd.RelPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.erd.RelPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    entityObjectId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    columnObjectId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.erd.RelPoint}
 */
proto.erd.RelPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.erd.RelPoint;
  return proto.erd.RelPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.erd.RelPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.erd.RelPoint}
 */
proto.erd.RelPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEntityObjectId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setColumnObjectId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.erd.RelPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.erd.RelPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.erd.RelPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.erd.RelPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntityObjectId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getColumnObjectId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.erd.RelPoint.Associate = {
  ONE: 0,
  MANY: 1
};

/**
 * optional int32 entity_object_id = 1;
 * @return {number}
 */
proto.erd.RelPoint.prototype.getEntityObjectId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.erd.RelPoint.prototype.setEntityObjectId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string column_object_id = 2;
 * @return {string}
 */
proto.erd.RelPoint.prototype.getColumnObjectId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.erd.RelPoint.prototype.setColumnObjectId = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.erd.RelationAttribute = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.erd.RelationAttribute.repeatedFields_, null);
};
goog.inherits(proto.erd.RelationAttribute, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.erd.RelationAttribute.displayName = 'proto.erd.RelationAttribute';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.erd.RelationAttribute.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.erd.RelationAttribute.prototype.toObject = function(opt_includeInstance) {
  return proto.erd.RelationAttribute.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.erd.RelationAttribute} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.erd.RelationAttribute.toObject = function(includeInstance, msg) {
  var f, obj = {
    bentPointsList: jspb.Message.toObjectList(msg.getBentPointsList(),
    proto.erd.Coord.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.erd.RelationAttribute}
 */
proto.erd.RelationAttribute.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.erd.RelationAttribute;
  return proto.erd.RelationAttribute.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.erd.RelationAttribute} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.erd.RelationAttribute}
 */
proto.erd.RelationAttribute.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.erd.Coord;
      reader.readMessage(value,proto.erd.Coord.deserializeBinaryFromReader);
      msg.addBentPoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.erd.RelationAttribute.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.erd.RelationAttribute.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.erd.RelationAttribute} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.erd.RelationAttribute.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBentPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.erd.Coord.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Coord bent_points = 1;
 * @return {!Array.<!proto.erd.Coord>}
 */
proto.erd.RelationAttribute.prototype.getBentPointsList = function() {
  return /** @type{!Array.<!proto.erd.Coord>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.erd.Coord, 1));
};


/** @param {!Array.<!proto.erd.Coord>} value */
proto.erd.RelationAttribute.prototype.setBentPointsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.erd.Coord=} opt_value
 * @param {number=} opt_index
 * @return {!proto.erd.Coord}
 */
proto.erd.RelationAttribute.prototype.addBentPoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.erd.Coord, opt_index);
};


proto.erd.RelationAttribute.prototype.clearBentPointsList = function() {
  this.setBentPointsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.erd.Move = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.erd.Move, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.erd.Move.displayName = 'proto.erd.Move';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.erd.Move.prototype.toObject = function(opt_includeInstance) {
  return proto.erd.Move.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.erd.Move} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.erd.Move.toObject = function(includeInstance, msg) {
  var f, obj = {
    objectId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    from: (f = msg.getFrom()) && proto.erd.Coord.toObject(includeInstance, f),
    to: (f = msg.getTo()) && proto.erd.Coord.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.erd.Move}
 */
proto.erd.Move.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.erd.Move;
  return proto.erd.Move.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.erd.Move} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.erd.Move}
 */
proto.erd.Move.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setObjectId(value);
      break;
    case 2:
      var value = new proto.erd.Coord;
      reader.readMessage(value,proto.erd.Coord.deserializeBinaryFromReader);
      msg.setFrom(value);
      break;
    case 3:
      var value = new proto.erd.Coord;
      reader.readMessage(value,proto.erd.Coord.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.erd.Move.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.erd.Move.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.erd.Move} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.erd.Move.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjectId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFrom();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.erd.Coord.serializeBinaryToWriter
    );
  }
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.erd.Coord.serializeBinaryToWriter
    );
  }
};


/**
 * optional string object_id = 1;
 * @return {string}
 */
proto.erd.Move.prototype.getObjectId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.erd.Move.prototype.setObjectId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Coord from = 2;
 * @return {?proto.erd.Coord}
 */
proto.erd.Move.prototype.getFrom = function() {
  return /** @type{?proto.erd.Coord} */ (
    jspb.Message.getWrapperField(this, proto.erd.Coord, 2));
};


/** @param {?proto.erd.Coord|undefined} value */
proto.erd.Move.prototype.setFrom = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.erd.Move.prototype.clearFrom = function() {
  this.setFrom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.erd.Move.prototype.hasFrom = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Coord to = 3;
 * @return {?proto.erd.Coord}
 */
proto.erd.Move.prototype.getTo = function() {
  return /** @type{?proto.erd.Coord} */ (
    jspb.Message.getWrapperField(this, proto.erd.Coord, 3));
};


/** @param {?proto.erd.Coord|undefined} value */
proto.erd.Move.prototype.setTo = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.erd.Move.prototype.clearTo = function() {
  this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.erd.Move.prototype.hasTo = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.erd.CoordWH = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.erd.CoordWH, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.erd.CoordWH.displayName = 'proto.erd.CoordWH';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.erd.CoordWH.prototype.toObject = function(opt_includeInstance) {
  return proto.erd.CoordWH.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.erd.CoordWH} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.erd.CoordWH.toObject = function(includeInstance, msg) {
  var f, obj = {
    coord: (f = msg.getCoord()) && proto.erd.Coord.toObject(includeInstance, f),
    widthHeight: (f = msg.getWidthHeight()) && proto.erd.WidthHeight.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.erd.CoordWH}
 */
proto.erd.CoordWH.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.erd.CoordWH;
  return proto.erd.CoordWH.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.erd.CoordWH} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.erd.CoordWH}
 */
proto.erd.CoordWH.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.erd.Coord;
      reader.readMessage(value,proto.erd.Coord.deserializeBinaryFromReader);
      msg.setCoord(value);
      break;
    case 2:
      var value = new proto.erd.WidthHeight;
      reader.readMessage(value,proto.erd.WidthHeight.deserializeBinaryFromReader);
      msg.setWidthHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.erd.CoordWH.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.erd.CoordWH.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.erd.CoordWH} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.erd.CoordWH.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCoord();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.erd.Coord.serializeBinaryToWriter
    );
  }
  f = message.getWidthHeight();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.erd.WidthHeight.serializeBinaryToWriter
    );
  }
};


/**
 * optional Coord coord = 1;
 * @return {?proto.erd.Coord}
 */
proto.erd.CoordWH.prototype.getCoord = function() {
  return /** @type{?proto.erd.Coord} */ (
    jspb.Message.getWrapperField(this, proto.erd.Coord, 1));
};


/** @param {?proto.erd.Coord|undefined} value */
proto.erd.CoordWH.prototype.setCoord = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.erd.CoordWH.prototype.clearCoord = function() {
  this.setCoord(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.erd.CoordWH.prototype.hasCoord = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional WidthHeight width_height = 2;
 * @return {?proto.erd.WidthHeight}
 */
proto.erd.CoordWH.prototype.getWidthHeight = function() {
  return /** @type{?proto.erd.WidthHeight} */ (
    jspb.Message.getWrapperField(this, proto.erd.WidthHeight, 2));
};


/** @param {?proto.erd.WidthHeight|undefined} value */
proto.erd.CoordWH.prototype.setWidthHeight = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.erd.CoordWH.prototype.clearWidthHeight = function() {
  this.setWidthHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.erd.CoordWH.prototype.hasWidthHeight = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.erd.Transform = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.erd.Transform, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.erd.Transform.displayName = 'proto.erd.Transform';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.erd.Transform.prototype.toObject = function(opt_includeInstance) {
  return proto.erd.Transform.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.erd.Transform} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.erd.Transform.toObject = function(includeInstance, msg) {
  var f, obj = {
    objectId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    from: (f = msg.getFrom()) && proto.erd.CoordWH.toObject(includeInstance, f),
    to: (f = msg.getTo()) && proto.erd.CoordWH.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.erd.Transform}
 */
proto.erd.Transform.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.erd.Transform;
  return proto.erd.Transform.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.erd.Transform} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.erd.Transform}
 */
proto.erd.Transform.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setObjectId(value);
      break;
    case 2:
      var value = new proto.erd.CoordWH;
      reader.readMessage(value,proto.erd.CoordWH.deserializeBinaryFromReader);
      msg.setFrom(value);
      break;
    case 3:
      var value = new proto.erd.CoordWH;
      reader.readMessage(value,proto.erd.CoordWH.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.erd.Transform.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.erd.Transform.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.erd.Transform} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.erd.Transform.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjectId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFrom();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.erd.CoordWH.serializeBinaryToWriter
    );
  }
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.erd.CoordWH.serializeBinaryToWriter
    );
  }
};


/**
 * optional string object_id = 1;
 * @return {string}
 */
proto.erd.Transform.prototype.getObjectId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.erd.Transform.prototype.setObjectId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional CoordWH from = 2;
 * @return {?proto.erd.CoordWH}
 */
proto.erd.Transform.prototype.getFrom = function() {
  return /** @type{?proto.erd.CoordWH} */ (
    jspb.Message.getWrapperField(this, proto.erd.CoordWH, 2));
};


/** @param {?proto.erd.CoordWH|undefined} value */
proto.erd.Transform.prototype.setFrom = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.erd.Transform.prototype.clearFrom = function() {
  this.setFrom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.erd.Transform.prototype.hasFrom = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CoordWH to = 3;
 * @return {?proto.erd.CoordWH}
 */
proto.erd.Transform.prototype.getTo = function() {
  return /** @type{?proto.erd.CoordWH} */ (
    jspb.Message.getWrapperField(this, proto.erd.CoordWH, 3));
};


/** @param {?proto.erd.CoordWH|undefined} value */
proto.erd.Transform.prototype.setTo = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.erd.Transform.prototype.clearTo = function() {
  this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.erd.Transform.prototype.hasTo = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.erd.Activity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.erd.Activity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.erd.Activity.displayName = 'proto.erd.Activity';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.erd.Activity.prototype.toObject = function(opt_includeInstance) {
  return proto.erd.Activity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.erd.Activity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.erd.Activity.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.erd.Activity}
 */
proto.erd.Activity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.erd.Activity;
  return proto.erd.Activity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.erd.Activity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.erd.Activity}
 */
proto.erd.Activity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.erd.Activity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.erd.Activity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.erd.Activity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.erd.Activity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.erd.Activity.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.erd.Activity.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.erd.Activity.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.erd.Activity.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.erd.Order = {
  ASC: 0,
  DESC: 1
};

/**
 * @enum {number}
 */
proto.erd.ColumnType = {
  BIT: 0,
  TINYINT: 1,
  BOOL: 2,
  SMALLINT: 3,
  MIDIUM: 4,
  INT: 5,
  INTEGER: 6,
  VARCHAR: 7,
  CHAR: 8,
  DATE: 9,
  DATETIME: 10,
  TIMESTAMP: 11
};

goog.object.extend(exports, proto.erd);
