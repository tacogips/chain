syntax = "proto3";

package entity;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "erd.proto";
import "event.proto";

option go_package                      = "gen";
option (gogoproto.marshaler_all)       = true;
option (gogoproto.sizer_all)           = true;
option (gogoproto.unmarshaler_all)     = true;
option (gogoproto.goproto_getters_all) = false;

// version_id will be used to detect conflict action.
message Entity {
  erd.ObjectID object_id        = 1;
  erd.Coordinate cordinate      = 2; // position of top-left
  erd.Size size                 = 3;
  repeated EntityColumn columns = 4;
  int64 z_index                 = 5; // depth //TODO
}

// TODO tacogips add other types
enum ColumnType {
  BIT       = 0;
  TINYINT   = 1;
  BOOL      = 2;
  SMALLINT  = 3;
  MIDIUM    = 4;
  INT       = 5;
  INTEGER   = 6;
  VARCHAR   = 7;
  CHAR      = 8;
  DATE      = 9;
  DATETIME  = 10;
  TIMESTAMP = 11;
}

message EntityColumn {
  erd.ObjectID object_id       = 1;
  int32 idx                    = 2;
  int32 name                   = 3;
  ColumnType type              = 4;
  EntityColumnAttributes attrs = 5;
}

message EntityColumnAttributes {
  EnumColumnAttribute attr_enum     = 1 [ (gogoproto.nullable) = true ];
  NumberColumnAttribute attr_number = 2 [ (gogoproto.nullable) = true ];
  StringColumnAttribute attr_string = 3 [ (gogoproto.nullable) = true ];
}

message EnumColumnAttribute {
  repeated string vals = 1;
  string default_value = 2;
}

message StringColumnAttribute {
  int32 length         = 1;
  string default_value = 2;
}

message NumberColumnAttribute {
  int32 length        = 1;
  int32 decimal       = 2;
  bool is_unsigned    = 3;
  float default_value = 4;
}

message EntityActivity {
  erd.Activity activity = 1;
  Entity entity         = 2;
}

// EntityService cantains actions affects entity
service EntityService {
  rpc CreateEntity(stream event.EventCreateEntity) returns (stream EntityActivity);
  rpc MoveEntity(stream event.EventMoveEntity) returns (stream EntityActivity);
}

