// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stream.proto

package gen

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/types"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type StreamConnectReq_Action int32

const (
	StreamConnectReq_REGISTER StreamConnectReq_Action = 0
	StreamConnectReq_LOGOUT   StreamConnectReq_Action = 1
)

var StreamConnectReq_Action_name = map[int32]string{
	0: "REGISTER",
	1: "LOGOUT",
}
var StreamConnectReq_Action_value = map[string]int32{
	"REGISTER": 0,
	"LOGOUT":   1,
}

func (x StreamConnectReq_Action) String() string {
	return proto.EnumName(StreamConnectReq_Action_name, int32(x))
}
func (StreamConnectReq_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorStream, []int{0, 0}
}

type StreamPayload_Event int32

const (
	StreamPayload_NEW    StreamPayload_Event = 0
	StreamPayload_MOD    StreamPayload_Event = 1
	StreamPayload_DELETE StreamPayload_Event = 2
)

var StreamPayload_Event_name = map[int32]string{
	0: "NEW",
	1: "MOD",
	2: "DELETE",
}
var StreamPayload_Event_value = map[string]int32{
	"NEW":    0,
	"MOD":    1,
	"DELETE": 2,
}

func (x StreamPayload_Event) String() string {
	return proto.EnumName(StreamPayload_Event_name, int32(x))
}
func (StreamPayload_Event) EnumDescriptor() ([]byte, []int) { return fileDescriptorStream, []int{1, 0} }

type StreamConnectReq struct {
	Authed *Authed                 `protobuf:"bytes,1,opt,name=authed" json:"authed,omitempty"`
	Action StreamConnectReq_Action `protobuf:"varint,2,opt,name=action,proto3,enum=stream.StreamConnectReq_Action" json:"action,omitempty"`
}

func (m *StreamConnectReq) Reset()                    { *m = StreamConnectReq{} }
func (m *StreamConnectReq) String() string            { return proto.CompactTextString(m) }
func (*StreamConnectReq) ProtoMessage()               {}
func (*StreamConnectReq) Descriptor() ([]byte, []int) { return fileDescriptorStream, []int{0} }

type StreamPayload struct {
	Event StreamPayload_Event `protobuf:"varint,1,opt,name=event,proto3,enum=stream.StreamPayload_Event" json:"event,omitempty"`
	// Types that are valid to be assigned to Object:
	//	*StreamPayload_Entity
	//	*StreamPayload_Rel
	Object isStreamPayload_Object `protobuf_oneof:"object"`
}

func (m *StreamPayload) Reset()                    { *m = StreamPayload{} }
func (m *StreamPayload) String() string            { return proto.CompactTextString(m) }
func (*StreamPayload) ProtoMessage()               {}
func (*StreamPayload) Descriptor() ([]byte, []int) { return fileDescriptorStream, []int{1} }

type isStreamPayload_Object interface {
	isStreamPayload_Object()
	MarshalTo([]byte) (int, error)
	Size() int
}

type StreamPayload_Entity struct {
	Entity *Entity `protobuf:"bytes,2,opt,name=entity,oneof"`
}
type StreamPayload_Rel struct {
	Rel *Rel `protobuf:"bytes,3,opt,name=rel,oneof"`
}

func (*StreamPayload_Entity) isStreamPayload_Object() {}
func (*StreamPayload_Rel) isStreamPayload_Object()    {}

func (m *StreamPayload) GetObject() isStreamPayload_Object {
	if m != nil {
		return m.Object
	}
	return nil
}

func (m *StreamPayload) GetEntity() *Entity {
	if x, ok := m.GetObject().(*StreamPayload_Entity); ok {
		return x.Entity
	}
	return nil
}

func (m *StreamPayload) GetRel() *Rel {
	if x, ok := m.GetObject().(*StreamPayload_Rel); ok {
		return x.Rel
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*StreamPayload) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _StreamPayload_OneofMarshaler, _StreamPayload_OneofUnmarshaler, _StreamPayload_OneofSizer, []interface{}{
		(*StreamPayload_Entity)(nil),
		(*StreamPayload_Rel)(nil),
	}
}

func _StreamPayload_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*StreamPayload)
	// object
	switch x := m.Object.(type) {
	case *StreamPayload_Entity:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Entity); err != nil {
			return err
		}
	case *StreamPayload_Rel:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Rel); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("StreamPayload.Object has unexpected type %T", x)
	}
	return nil
}

func _StreamPayload_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*StreamPayload)
	switch tag {
	case 2: // object.entity
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Entity)
		err := b.DecodeMessage(msg)
		m.Object = &StreamPayload_Entity{msg}
		return true, err
	case 3: // object.rel
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Rel)
		err := b.DecodeMessage(msg)
		m.Object = &StreamPayload_Rel{msg}
		return true, err
	default:
		return false, nil
	}
}

func _StreamPayload_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*StreamPayload)
	// object
	switch x := m.Object.(type) {
	case *StreamPayload_Entity:
		s := proto.Size(x.Entity)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamPayload_Rel:
		s := proto.Size(x.Rel)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*StreamConnectReq)(nil), "stream.StreamConnectReq")
	proto.RegisterType((*StreamPayload)(nil), "stream.StreamPayload")
	proto.RegisterEnum("stream.StreamConnectReq_Action", StreamConnectReq_Action_name, StreamConnectReq_Action_value)
	proto.RegisterEnum("stream.StreamPayload_Event", StreamPayload_Event_name, StreamPayload_Event_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for StreamService service

type StreamServiceClient interface {
	Connect(ctx context.Context, in *StreamConnectReq, opts ...grpc.CallOption) (StreamService_ConnectClient, error)
}

type streamServiceClient struct {
	cc *grpc.ClientConn
}

func NewStreamServiceClient(cc *grpc.ClientConn) StreamServiceClient {
	return &streamServiceClient{cc}
}

func (c *streamServiceClient) Connect(ctx context.Context, in *StreamConnectReq, opts ...grpc.CallOption) (StreamService_ConnectClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_StreamService_serviceDesc.Streams[0], c.cc, "/stream.StreamService/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamService_ConnectClient interface {
	Recv() (*StreamPayload, error)
	grpc.ClientStream
}

type streamServiceConnectClient struct {
	grpc.ClientStream
}

func (x *streamServiceConnectClient) Recv() (*StreamPayload, error) {
	m := new(StreamPayload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for StreamService service

type StreamServiceServer interface {
	Connect(*StreamConnectReq, StreamService_ConnectServer) error
}

func RegisterStreamServiceServer(s *grpc.Server, srv StreamServiceServer) {
	s.RegisterService(&_StreamService_serviceDesc, srv)
}

func _StreamService_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamConnectReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServiceServer).Connect(m, &streamServiceConnectServer{stream})
}

type StreamService_ConnectServer interface {
	Send(*StreamPayload) error
	grpc.ServerStream
}

type streamServiceConnectServer struct {
	grpc.ServerStream
}

func (x *streamServiceConnectServer) Send(m *StreamPayload) error {
	return x.ServerStream.SendMsg(m)
}

var _StreamService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stream.StreamService",
	HandlerType: (*StreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _StreamService_Connect_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "stream.proto",
}

func (m *StreamConnectReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamConnectReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Authed != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Authed.Size()))
		n1, err := m.Authed.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Action != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Action))
	}
	return i, nil
}

func (m *StreamPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Event != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Event))
	}
	if m.Object != nil {
		nn2, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	return i, nil
}

func (m *StreamPayload_Entity) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Entity != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Entity.Size()))
		n3, err := m.Entity.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *StreamPayload_Rel) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Rel != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Rel.Size()))
		n4, err := m.Rel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func encodeVarintStream(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *StreamConnectReq) Size() (n int) {
	var l int
	_ = l
	if m.Authed != nil {
		l = m.Authed.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Action != 0 {
		n += 1 + sovStream(uint64(m.Action))
	}
	return n
}

func (m *StreamPayload) Size() (n int) {
	var l int
	_ = l
	if m.Event != 0 {
		n += 1 + sovStream(uint64(m.Event))
	}
	if m.Object != nil {
		n += m.Object.Size()
	}
	return n
}

func (m *StreamPayload_Entity) Size() (n int) {
	var l int
	_ = l
	if m.Entity != nil {
		l = m.Entity.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	return n
}
func (m *StreamPayload_Rel) Size() (n int) {
	var l int
	_ = l
	if m.Rel != nil {
		l = m.Rel.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	return n
}

func sovStream(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozStream(x uint64) (n int) {
	return sovStream(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StreamConnectReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamConnectReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamConnectReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Authed == nil {
				m.Authed = &Authed{}
			}
			if err := m.Authed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= (StreamConnectReq_Action(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			m.Event = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Event |= (StreamPayload_Event(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Entity{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Object = &StreamPayload_Entity{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Rel{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Object = &StreamPayload_Rel{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStream(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStream
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStream
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStream
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthStream
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowStream
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipStream(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthStream = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStream   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("stream.proto", fileDescriptorStream) }

var fileDescriptorStream = []byte{
	// 396 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xdf, 0x8a, 0xd3, 0x40,
	0x14, 0xc6, 0x33, 0x1b, 0x76, 0xb6, 0x9e, 0xd6, 0x25, 0x0c, 0x2c, 0x84, 0x2a, 0xd9, 0x25, 0xb8,
	0xb0, 0x37, 0x66, 0x35, 0x5e, 0x78, 0xe3, 0xcd, 0xae, 0x1d, 0x5a, 0xa1, 0xb5, 0x32, 0xad, 0x08,
	0xde, 0xe5, 0xcf, 0x31, 0x8d, 0x24, 0x99, 0x9a, 0x4e, 0x0a, 0x7d, 0x10, 0xdf, 0xc5, 0x47, 0xe8,
	0xa5, 0x8f, 0xa0, 0x7d, 0x12, 0xc9, 0x64, 0x44, 0x2c, 0x7a, 0x77, 0xce, 0xf7, 0xfd, 0xe6, 0xe4,
	0x3b, 0x27, 0x30, 0xd8, 0xa8, 0x1a, 0xa3, 0x32, 0x58, 0xd7, 0x52, 0x49, 0x46, 0xbb, 0x6e, 0xf8,
	0x34, 0xcb, 0xd5, 0xaa, 0x89, 0x83, 0x44, 0x96, 0xb7, 0x99, 0xcc, 0xe4, 0xad, 0xb6, 0xe3, 0xe6,
	0x93, 0xee, 0x74, 0xa3, 0xab, 0xee, 0xd9, 0xd0, 0xcb, 0xa4, 0xcc, 0x0a, 0xfc, 0x43, 0xa5, 0x4d,
	0x1d, 0xa9, 0x5c, 0x56, 0xc6, 0xbf, 0x3c, 0xf6, 0x55, 0x5e, 0xe2, 0x46, 0x45, 0xe5, 0xda, 0x00,
	0x0f, 0xb0, 0x4e, 0x4d, 0x09, 0x51, 0xa3, 0x56, 0x5d, 0xed, 0x7f, 0x25, 0xe0, 0x2c, 0x74, 0xa2,
	0xd7, 0xb2, 0xaa, 0x30, 0x51, 0x02, 0xbf, 0xb0, 0x27, 0x40, 0x5b, 0x04, 0x53, 0x97, 0x5c, 0x91,
	0x9b, 0x7e, 0x38, 0x08, 0xf4, 0x8b, 0x3b, 0xad, 0x09, 0xe3, 0xb1, 0x97, 0x40, 0xa3, 0xa4, 0x8d,
	0xe0, 0x9e, 0x5c, 0x91, 0x9b, 0xf3, 0xf0, 0x32, 0x30, 0x8b, 0x1e, 0xcf, 0x0b, 0xee, 0x34, 0x26,
	0x0c, 0xee, 0xfb, 0x40, 0x3b, 0x85, 0x0d, 0xa0, 0x27, 0xf8, 0xf8, 0xcd, 0x62, 0xc9, 0x85, 0x63,
	0x31, 0x00, 0x3a, 0x9d, 0x8f, 0xe7, 0xef, 0x97, 0x0e, 0xf1, 0xbf, 0x11, 0x78, 0xd8, 0xcd, 0x79,
	0x17, 0xed, 0x0a, 0x19, 0xa5, 0xec, 0x39, 0x9c, 0xe2, 0x16, 0x2b, 0xa5, 0x33, 0x9d, 0x87, 0x8f,
	0xfe, 0xfe, 0x9a, 0xa1, 0x02, 0xde, 0x22, 0xa2, 0x23, 0xd9, 0x35, 0x50, 0xac, 0x54, 0xae, 0x76,
	0x3a, 0x61, 0x3f, 0xec, 0x07, 0xed, 0x11, 0xb8, 0x96, 0x26, 0x96, 0x30, 0x26, 0x7b, 0x0c, 0x76,
	0x8d, 0x85, 0x6b, 0x6b, 0xa6, 0xa7, 0x19, 0x81, 0xc5, 0xc4, 0x12, 0xad, 0xec, 0x5f, 0xc3, 0xa9,
	0x1e, 0xca, 0xce, 0xc0, 0x7e, 0xcb, 0x3f, 0x38, 0x56, 0x5b, 0xcc, 0xe6, 0x23, 0x87, 0xb4, 0x81,
	0x47, 0x7c, 0xca, 0x97, 0xdc, 0x39, 0xb9, 0xef, 0x01, 0x95, 0xf1, 0x67, 0x4c, 0x54, 0x38, 0xfb,
	0x9d, 0x7c, 0x81, 0xf5, 0x36, 0x4f, 0x90, 0xbd, 0x82, 0x33, 0x73, 0x0c, 0xe6, 0xfe, 0xef, 0x46,
	0xc3, 0x8b, 0x7f, 0xee, 0xf3, 0x8c, 0xdc, 0x5f, 0xec, 0x7f, 0x7a, 0xd6, 0xfe, 0xe0, 0x91, 0xef,
	0x07, 0x8f, 0xfc, 0x38, 0x78, 0xe4, 0xa3, 0x9d, 0x61, 0x15, 0x53, 0xfd, 0xff, 0x5e, 0xfc, 0x0a,
	0x00, 0x00, 0xff, 0xff, 0xb4, 0xba, 0x49, 0x8e, 0x5e, 0x02, 0x00, 0x00,
}
