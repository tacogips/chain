// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stream.proto

package gen

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/types"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for StreamService service

type StreamServiceClient interface {
	Entity(ctx context.Context, in *Empty, opts ...grpc.CallOption) (StreamService_EntityClient, error)
	Relation(ctx context.Context, in *Empty, opts ...grpc.CallOption) (StreamService_RelationClient, error)
}

type streamServiceClient struct {
	cc *grpc.ClientConn
}

func NewStreamServiceClient(cc *grpc.ClientConn) StreamServiceClient {
	return &streamServiceClient{cc}
}

func (c *streamServiceClient) Entity(ctx context.Context, in *Empty, opts ...grpc.CallOption) (StreamService_EntityClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_StreamService_serviceDesc.Streams[0], c.cc, "/stream.StreamService/Entity", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceEntityClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamService_EntityClient interface {
	Recv() (*Entity, error)
	grpc.ClientStream
}

type streamServiceEntityClient struct {
	grpc.ClientStream
}

func (x *streamServiceEntityClient) Recv() (*Entity, error) {
	m := new(Entity)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamServiceClient) Relation(ctx context.Context, in *Empty, opts ...grpc.CallOption) (StreamService_RelationClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_StreamService_serviceDesc.Streams[1], c.cc, "/stream.StreamService/Relation", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceRelationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamService_RelationClient interface {
	Recv() (*OneToManyRelation, error)
	grpc.ClientStream
}

type streamServiceRelationClient struct {
	grpc.ClientStream
}

func (x *streamServiceRelationClient) Recv() (*OneToManyRelation, error) {
	m := new(OneToManyRelation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for StreamService service

type StreamServiceServer interface {
	Entity(*Empty, StreamService_EntityServer) error
	Relation(*Empty, StreamService_RelationServer) error
}

func RegisterStreamServiceServer(s *grpc.Server, srv StreamServiceServer) {
	s.RegisterService(&_StreamService_serviceDesc, srv)
}

func _StreamService_Entity_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServiceServer).Entity(m, &streamServiceEntityServer{stream})
}

type StreamService_EntityServer interface {
	Send(*Entity) error
	grpc.ServerStream
}

type streamServiceEntityServer struct {
	grpc.ServerStream
}

func (x *streamServiceEntityServer) Send(m *Entity) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamService_Relation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServiceServer).Relation(m, &streamServiceRelationServer{stream})
}

type StreamService_RelationServer interface {
	Send(*OneToManyRelation) error
	grpc.ServerStream
}

type streamServiceRelationServer struct {
	grpc.ServerStream
}

func (x *streamServiceRelationServer) Send(m *OneToManyRelation) error {
	return x.ServerStream.SendMsg(m)
}

var _StreamService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stream.StreamService",
	HandlerType: (*StreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Entity",
			Handler:       _StreamService_Entity_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Relation",
			Handler:       _StreamService_Relation_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "stream.proto",
}

func init() { proto.RegisterFile("stream.proto", fileDescriptorStream) }

var fileDescriptorStream = []byte{
	// 217 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x2e, 0x29, 0x4a,
	0x4d, 0xcc, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0xa4, 0x74, 0xd3, 0x33,
	0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0xd3, 0xf3, 0xd3, 0xf3, 0xf5, 0xc1, 0xd2,
	0x49, 0xa5, 0x69, 0x60, 0x1e, 0x98, 0x03, 0x66, 0x41, 0xb4, 0x49, 0xc9, 0xa5, 0xe7, 0xe7, 0xa7,
	0xe7, 0xa4, 0x22, 0x54, 0xa5, 0x94, 0x16, 0x25, 0x96, 0x64, 0xe6, 0xe7, 0x41, 0xe5, 0xe5, 0xd1,
	0xe5, 0x4b, 0x32, 0x73, 0x53, 0x8b, 0x4b, 0x12, 0x73, 0x0b, 0xa0, 0x0a, 0x38, 0x53, 0x8b, 0x52,
	0xa0, 0x4c, 0x9e, 0xd4, 0xbc, 0x92, 0xcc, 0x92, 0x4a, 0x08, 0xcf, 0x28, 0x87, 0x8b, 0x37, 0x18,
	0xec, 0xa4, 0xe0, 0xd4, 0xa2, 0xb2, 0xcc, 0xe4, 0x54, 0x21, 0x35, 0x2e, 0x36, 0x57, 0xb0, 0x02,
	0x21, 0x2e, 0x3d, 0x90, 0x26, 0xd7, 0xdc, 0x82, 0x92, 0x4a, 0x29, 0x3e, 0x3d, 0xa8, 0x2e, 0x88,
	0x9c, 0x01, 0xa3, 0x90, 0x31, 0x17, 0x47, 0x50, 0x6a, 0x0e, 0xd8, 0x11, 0x28, 0x2a, 0x25, 0x61,
	0x2a, 0xfd, 0xf3, 0x52, 0x43, 0xf2, 0x7d, 0x13, 0xf3, 0x2a, 0x61, 0xca, 0x0c, 0x18, 0x9d, 0x44,
	0x4f, 0x3c, 0x94, 0x63, 0x38, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4,
	0x18, 0xa3, 0x98, 0xd3, 0x53, 0xf3, 0x92, 0xd8, 0xc0, 0x6e, 0x31, 0x06, 0x04, 0x00, 0x00, 0xff,
	0xff, 0x0b, 0x1d, 0x90, 0xa4, 0x2c, 0x01, 0x00, 0x00,
}
