// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: relation.proto

package gen

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/types"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// start point/ end pont
type RelationPointType int32

const (
	RelationPointType_START RelationPointType = 0
	RelationPointType_END   RelationPointType = 1
)

var RelationPointType_name = map[int32]string{
	0: "START",
	1: "END",
}
var RelationPointType_value = map[string]int32{
	"START": 0,
	"END":   1,
}

func (x RelationPointType) String() string {
	return proto.EnumName(RelationPointType_name, int32(x))
}
func (RelationPointType) EnumDescriptor() ([]byte, []int) { return fileDescriptorRelation, []int{0} }

// relation between enitties
type Relation struct {
	ObjectId   *ObjectID      `protobuf:"bytes,1,opt,name=object_id,json=objectId" json:"object_id,omitempty"`
	StartPoint *RelationPoint `protobuf:"bytes,2,opt,name=start_point,json=startPoint" json:"start_point,omitempty"`
	EndPoint   *RelationPoint `protobuf:"bytes,3,opt,name=end_point,json=endPoint" json:"end_point,omitempty"`
	BentPoints []*Coordinate  `protobuf:"bytes,4,rep,name=bent_points,json=bentPoints" json:"bent_points,omitempty"`
}

func (m *Relation) Reset()                    { *m = Relation{} }
func (m *Relation) String() string            { return proto.CompactTextString(m) }
func (*Relation) ProtoMessage()               {}
func (*Relation) Descriptor() ([]byte, []int) { return fileDescriptorRelation, []int{0} }

type RelationPoint struct {
	ConnectedEnitity *Entity `protobuf:"bytes,1,opt,name=connected_enitity,json=connectedEnitity" json:"connected_enitity,omitempty"`
}

func (m *RelationPoint) Reset()                    { *m = RelationPoint{} }
func (m *RelationPoint) String() string            { return proto.CompactTextString(m) }
func (*RelationPoint) ProtoMessage()               {}
func (*RelationPoint) Descriptor() ([]byte, []int) { return fileDescriptorRelation, []int{1} }

type NewConnectRelation struct {
	StartPoint *RelationPoint `protobuf:"bytes,2,opt,name=start_point,json=startPoint" json:"start_point,omitempty"`
	EndPoint   *RelationPoint `protobuf:"bytes,3,opt,name=end_point,json=endPoint" json:"end_point,omitempty"`
}

func (m *NewConnectRelation) Reset()                    { *m = NewConnectRelation{} }
func (m *NewConnectRelation) String() string            { return proto.CompactTextString(m) }
func (*NewConnectRelation) ProtoMessage()               {}
func (*NewConnectRelation) Descriptor() ([]byte, []int) { return fileDescriptorRelation, []int{2} }

type RelationActivity struct {
	Activity *Activity `protobuf:"bytes,1,opt,name=activity" json:"activity,omitempty"`
	Relation *Relation `protobuf:"bytes,2,opt,name=relation" json:"relation,omitempty"`
}

func (m *RelationActivity) Reset()                    { *m = RelationActivity{} }
func (m *RelationActivity) String() string            { return proto.CompactTextString(m) }
func (*RelationActivity) ProtoMessage()               {}
func (*RelationActivity) Descriptor() ([]byte, []int) { return fileDescriptorRelation, []int{3} }

func init() {
	proto.RegisterType((*Relation)(nil), "relation.Relation")
	proto.RegisterType((*RelationPoint)(nil), "relation.RelationPoint")
	proto.RegisterType((*NewConnectRelation)(nil), "relation.NewConnectRelation")
	proto.RegisterType((*RelationActivity)(nil), "relation.RelationActivity")
	proto.RegisterEnum("relation.RelationPointType", RelationPointType_name, RelationPointType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RelationService service

type RelationServiceClient interface {
	ConnectRelation(ctx context.Context, opts ...grpc.CallOption) (RelationService_ConnectRelationClient, error)
	DeleteRelation(ctx context.Context, opts ...grpc.CallOption) (RelationService_DeleteRelationClient, error)
}

type relationServiceClient struct {
	cc *grpc.ClientConn
}

func NewRelationServiceClient(cc *grpc.ClientConn) RelationServiceClient {
	return &relationServiceClient{cc}
}

func (c *relationServiceClient) ConnectRelation(ctx context.Context, opts ...grpc.CallOption) (RelationService_ConnectRelationClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RelationService_serviceDesc.Streams[0], c.cc, "/relation.RelationService/ConnectRelation", opts...)
	if err != nil {
		return nil, err
	}
	x := &relationServiceConnectRelationClient{stream}
	return x, nil
}

type RelationService_ConnectRelationClient interface {
	Send(*NewConnectRelation) error
	Recv() (*RelationActivity, error)
	grpc.ClientStream
}

type relationServiceConnectRelationClient struct {
	grpc.ClientStream
}

func (x *relationServiceConnectRelationClient) Send(m *NewConnectRelation) error {
	return x.ClientStream.SendMsg(m)
}

func (x *relationServiceConnectRelationClient) Recv() (*RelationActivity, error) {
	m := new(RelationActivity)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *relationServiceClient) DeleteRelation(ctx context.Context, opts ...grpc.CallOption) (RelationService_DeleteRelationClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RelationService_serviceDesc.Streams[1], c.cc, "/relation.RelationService/DeleteRelation", opts...)
	if err != nil {
		return nil, err
	}
	x := &relationServiceDeleteRelationClient{stream}
	return x, nil
}

type RelationService_DeleteRelationClient interface {
	Send(*ObjectID) error
	Recv() (*RelationActivity, error)
	grpc.ClientStream
}

type relationServiceDeleteRelationClient struct {
	grpc.ClientStream
}

func (x *relationServiceDeleteRelationClient) Send(m *ObjectID) error {
	return x.ClientStream.SendMsg(m)
}

func (x *relationServiceDeleteRelationClient) Recv() (*RelationActivity, error) {
	m := new(RelationActivity)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for RelationService service

type RelationServiceServer interface {
	ConnectRelation(RelationService_ConnectRelationServer) error
	DeleteRelation(RelationService_DeleteRelationServer) error
}

func RegisterRelationServiceServer(s *grpc.Server, srv RelationServiceServer) {
	s.RegisterService(&_RelationService_serviceDesc, srv)
}

func _RelationService_ConnectRelation_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RelationServiceServer).ConnectRelation(&relationServiceConnectRelationServer{stream})
}

type RelationService_ConnectRelationServer interface {
	Send(*RelationActivity) error
	Recv() (*NewConnectRelation, error)
	grpc.ServerStream
}

type relationServiceConnectRelationServer struct {
	grpc.ServerStream
}

func (x *relationServiceConnectRelationServer) Send(m *RelationActivity) error {
	return x.ServerStream.SendMsg(m)
}

func (x *relationServiceConnectRelationServer) Recv() (*NewConnectRelation, error) {
	m := new(NewConnectRelation)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RelationService_DeleteRelation_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RelationServiceServer).DeleteRelation(&relationServiceDeleteRelationServer{stream})
}

type RelationService_DeleteRelationServer interface {
	Send(*RelationActivity) error
	Recv() (*ObjectID, error)
	grpc.ServerStream
}

type relationServiceDeleteRelationServer struct {
	grpc.ServerStream
}

func (x *relationServiceDeleteRelationServer) Send(m *RelationActivity) error {
	return x.ServerStream.SendMsg(m)
}

func (x *relationServiceDeleteRelationServer) Recv() (*ObjectID, error) {
	m := new(ObjectID)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RelationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "relation.RelationService",
	HandlerType: (*RelationServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConnectRelation",
			Handler:       _RelationService_ConnectRelation_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DeleteRelation",
			Handler:       _RelationService_DeleteRelation_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "relation.proto",
}

func (m *Relation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Relation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ObjectId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRelation(dAtA, i, uint64(m.ObjectId.Size()))
		n1, err := m.ObjectId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.StartPoint != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRelation(dAtA, i, uint64(m.StartPoint.Size()))
		n2, err := m.StartPoint.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.EndPoint != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRelation(dAtA, i, uint64(m.EndPoint.Size()))
		n3, err := m.EndPoint.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.BentPoints) > 0 {
		for _, msg := range m.BentPoints {
			dAtA[i] = 0x22
			i++
			i = encodeVarintRelation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RelationPoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelationPoint) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ConnectedEnitity != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRelation(dAtA, i, uint64(m.ConnectedEnitity.Size()))
		n4, err := m.ConnectedEnitity.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *NewConnectRelation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewConnectRelation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartPoint != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRelation(dAtA, i, uint64(m.StartPoint.Size()))
		n5, err := m.StartPoint.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.EndPoint != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRelation(dAtA, i, uint64(m.EndPoint.Size()))
		n6, err := m.EndPoint.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *RelationActivity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelationActivity) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Activity != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRelation(dAtA, i, uint64(m.Activity.Size()))
		n7, err := m.Activity.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Relation != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRelation(dAtA, i, uint64(m.Relation.Size()))
		n8, err := m.Relation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func encodeFixed64Relation(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Relation(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRelation(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Relation) Size() (n int) {
	var l int
	_ = l
	if m.ObjectId != nil {
		l = m.ObjectId.Size()
		n += 1 + l + sovRelation(uint64(l))
	}
	if m.StartPoint != nil {
		l = m.StartPoint.Size()
		n += 1 + l + sovRelation(uint64(l))
	}
	if m.EndPoint != nil {
		l = m.EndPoint.Size()
		n += 1 + l + sovRelation(uint64(l))
	}
	if len(m.BentPoints) > 0 {
		for _, e := range m.BentPoints {
			l = e.Size()
			n += 1 + l + sovRelation(uint64(l))
		}
	}
	return n
}

func (m *RelationPoint) Size() (n int) {
	var l int
	_ = l
	if m.ConnectedEnitity != nil {
		l = m.ConnectedEnitity.Size()
		n += 1 + l + sovRelation(uint64(l))
	}
	return n
}

func (m *NewConnectRelation) Size() (n int) {
	var l int
	_ = l
	if m.StartPoint != nil {
		l = m.StartPoint.Size()
		n += 1 + l + sovRelation(uint64(l))
	}
	if m.EndPoint != nil {
		l = m.EndPoint.Size()
		n += 1 + l + sovRelation(uint64(l))
	}
	return n
}

func (m *RelationActivity) Size() (n int) {
	var l int
	_ = l
	if m.Activity != nil {
		l = m.Activity.Size()
		n += 1 + l + sovRelation(uint64(l))
	}
	if m.Relation != nil {
		l = m.Relation.Size()
		n += 1 + l + sovRelation(uint64(l))
	}
	return n
}

func sovRelation(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRelation(x uint64) (n int) {
	return sovRelation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Relation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Relation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Relation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjectId == nil {
				m.ObjectId = &ObjectID{}
			}
			if err := m.ObjectId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartPoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartPoint == nil {
				m.StartPoint = &RelationPoint{}
			}
			if err := m.StartPoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndPoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndPoint == nil {
				m.EndPoint = &RelationPoint{}
			}
			if err := m.EndPoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BentPoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BentPoints = append(m.BentPoints, &Coordinate{})
			if err := m.BentPoints[len(m.BentPoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelationPoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelationPoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelationPoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectedEnitity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConnectedEnitity == nil {
				m.ConnectedEnitity = &Entity{}
			}
			if err := m.ConnectedEnitity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewConnectRelation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewConnectRelation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewConnectRelation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartPoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartPoint == nil {
				m.StartPoint = &RelationPoint{}
			}
			if err := m.StartPoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndPoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndPoint == nil {
				m.EndPoint = &RelationPoint{}
			}
			if err := m.EndPoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelationActivity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelationActivity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelationActivity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Activity == nil {
				m.Activity = &Activity{}
			}
			if err := m.Activity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Relation == nil {
				m.Relation = &Relation{}
			}
			if err := m.Relation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRelation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRelation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRelation
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRelation
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRelation(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRelation = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRelation   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("relation.proto", fileDescriptorRelation) }

var fileDescriptorRelation = []byte{
	// 448 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x93, 0xcf, 0x8e, 0x12, 0x41,
	0x10, 0xc6, 0x69, 0xf1, 0xcf, 0x50, 0xb8, 0xc0, 0x76, 0x62, 0x24, 0x13, 0x33, 0x6e, 0xe6, 0x22,
	0x6e, 0xe2, 0xec, 0x06, 0x3d, 0x98, 0x78, 0xc2, 0x85, 0xc3, 0x26, 0x66, 0xd5, 0x5e, 0x4e, 0x5e,
	0xc8, 0xcc, 0x74, 0x39, 0xb6, 0x81, 0x6e, 0x32, 0x14, 0x6b, 0xb8, 0xfb, 0x2e, 0xbe, 0xca, 0x1e,
	0x3d, 0x7a, 0x54, 0x9e, 0xc4, 0xd0, 0xd3, 0x33, 0x2b, 0x90, 0xe8, 0xcd, 0x13, 0x55, 0x5d, 0xbf,
	0xaf, 0xba, 0xea, 0xa3, 0x07, 0x5a, 0x39, 0x4e, 0x63, 0x52, 0x46, 0x47, 0xf3, 0xdc, 0x90, 0xe1,
	0x5e, 0x99, 0xfb, 0xcf, 0x32, 0x45, 0x9f, 0x96, 0x49, 0x94, 0x9a, 0xd9, 0x49, 0x66, 0x32, 0x73,
	0x62, 0x81, 0x64, 0xf9, 0xd1, 0x66, 0x36, 0xb1, 0x51, 0x21, 0xf4, 0x83, 0xcc, 0x98, 0x6c, 0x8a,
	0x37, 0x94, 0x5c, 0xe6, 0x7f, 0x34, 0xf6, 0x1f, 0xef, 0xd6, 0x49, 0xcd, 0x70, 0x41, 0xf1, 0x6c,
	0xee, 0x80, 0x06, 0xe6, 0xd2, 0x85, 0xf7, 0x51, 0x93, 0xa2, 0x55, 0x91, 0x85, 0x3f, 0x18, 0x78,
	0xc2, 0x4d, 0xc5, 0x8f, 0xa1, 0x61, 0x92, 0xcf, 0x98, 0xd2, 0x44, 0xc9, 0x2e, 0x3b, 0x62, 0xbd,
	0x66, 0xff, 0x20, 0xda, 0x28, 0xdf, 0xda, 0xd3, 0xf3, 0xa1, 0xf0, 0x8a, 0xfa, 0xb9, 0xe4, 0x2f,
	0xa1, 0xb9, 0xa0, 0x38, 0xa7, 0xc9, 0xdc, 0x28, 0x4d, 0xdd, 0x5b, 0x96, 0x7e, 0x18, 0x55, 0x1b,
	0x97, 0x4d, 0xdf, 0x6d, 0xca, 0x02, 0x2c, 0x6b, 0x63, 0xfe, 0x02, 0x1a, 0xa8, 0xa5, 0xd3, 0xd5,
	0xff, 0xae, 0xf3, 0x50, 0xcb, 0x42, 0x75, 0x0a, 0xcd, 0x04, 0xb5, 0xbb, 0x6e, 0xd1, 0xbd, 0x7d,
	0x54, 0xef, 0x35, 0xfb, 0x6d, 0x3b, 0xdd, 0x99, 0x31, 0xb9, 0x54, 0x3a, 0x26, 0x14, 0xb0, 0x61,
	0xac, 0x60, 0x11, 0xbe, 0x81, 0x83, 0xad, 0x66, 0xfc, 0x15, 0x1c, 0xa6, 0x46, 0x6b, 0x4c, 0x09,
	0xe5, 0x04, 0xb5, 0xda, 0xd8, 0xe0, 0xd6, 0x6c, 0x45, 0xce, 0x95, 0x91, 0xfd, 0x11, 0x9d, 0x0a,
	0x1c, 0x15, 0x5c, 0xf8, 0x95, 0x01, 0xbf, 0xc0, 0x2f, 0x67, 0xc5, 0x79, 0x65, 0xd9, 0x7f, 0xb6,
	0x21, 0x9c, 0x41, 0xa7, 0x2c, 0x0d, 0x52, 0x52, 0x57, 0x8a, 0x56, 0xfc, 0x29, 0x78, 0xb1, 0x8b,
	0xb7, 0xfe, 0xb5, 0x12, 0x10, 0x55, 0x99, 0x47, 0x50, 0xbd, 0x41, 0x37, 0x2b, 0xdf, 0xbf, 0x53,
	0x54, 0xcc, 0xf1, 0x13, 0x38, 0xdc, 0x9a, 0x64, 0xbc, 0x9a, 0x23, 0x6f, 0xc0, 0x9d, 0xcb, 0xf1,
	0x40, 0x8c, 0x3b, 0x35, 0x7e, 0x0f, 0xea, 0xa3, 0x8b, 0x61, 0x87, 0xf5, 0xbf, 0x31, 0x68, 0x97,
	0xe4, 0x25, 0xe6, 0x57, 0x2a, 0x45, 0xfe, 0x1e, 0xda, 0xbb, 0x76, 0x3d, 0xba, 0xb9, 0x6d, 0xdf,
	0x4c, 0xdf, 0xdf, 0x9f, 0xa5, 0xdc, 0x21, 0xac, 0xf5, 0xd8, 0x29, 0xe3, 0x03, 0x68, 0x0d, 0x71,
	0x8a, 0x84, 0x55, 0xc7, 0xed, 0x07, 0xfa, 0xef, 0x16, 0xaf, 0x1f, 0x5c, 0xff, 0x0a, 0x6a, 0xd7,
	0xeb, 0x80, 0x7d, 0x5f, 0x07, 0xec, 0xe7, 0x3a, 0x60, 0x1f, 0xea, 0x19, 0xea, 0xe4, 0xae, 0xfd,
	0x1e, 0x9e, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xa6, 0xcc, 0x5b, 0xe0, 0xb4, 0x03, 0x00, 0x00,
}
