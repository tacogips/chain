// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: erd.proto

package gen

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/types"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Order int32

const (
	Order_ASC  Order = 0
	Order_DESC Order = 1
)

var Order_name = map[int32]string{
	0: "ASC",
	1: "DESC",
}
var Order_value = map[string]int32{
	"ASC":  0,
	"DESC": 1,
}

func (x Order) String() string {
	return proto.EnumName(Order_name, int32(x))
}
func (Order) EnumDescriptor() ([]byte, []int) { return fileDescriptorErd, []int{0} }

type CoordinateAndSize struct {
	Coordinate *Coordinate `protobuf:"bytes,1,opt,name=coordinate" json:"coordinate,omitempty"`
	Size_      *Size       `protobuf:"bytes,2,opt,name=size" json:"size,omitempty"`
}

func (m *CoordinateAndSize) Reset()                    { *m = CoordinateAndSize{} }
func (m *CoordinateAndSize) String() string            { return proto.CompactTextString(m) }
func (*CoordinateAndSize) ProtoMessage()               {}
func (*CoordinateAndSize) Descriptor() ([]byte, []int) { return fileDescriptorErd, []int{0} }

type Coordinate struct {
	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (m *Coordinate) Reset()                    { *m = Coordinate{} }
func (m *Coordinate) String() string            { return proto.CompactTextString(m) }
func (*Coordinate) ProtoMessage()               {}
func (*Coordinate) Descriptor() ([]byte, []int) { return fileDescriptorErd, []int{1} }

type Size struct {
	Width  float32 `protobuf:"fixed32,1,opt,name=width,proto3" json:"width,omitempty"`
	Height float32 `protobuf:"fixed32,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *Size) Reset()                    { *m = Size{} }
func (m *Size) String() string            { return proto.CompactTextString(m) }
func (*Size) ProtoMessage()               {}
func (*Size) Descriptor() ([]byte, []int) { return fileDescriptorErd, []int{2} }

type Activity struct {
	Id                float32     `protobuf:"fixed32,1,opt,name=id,proto3" json:"id,omitempty"`
	Datetime          float32     `protobuf:"fixed32,2,opt,name=datetime,proto3" json:"datetime,omitempty"`
	Name              string      `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	AffectedObjectIds []*ObjectID `protobuf:"bytes,4,rep,name=affected_object_ids,json=affectedObjectIds" json:"affected_object_ids,omitempty"`
}

func (m *Activity) Reset()                    { *m = Activity{} }
func (m *Activity) String() string            { return proto.CompactTextString(m) }
func (*Activity) ProtoMessage()               {}
func (*Activity) Descriptor() ([]byte, []int) { return fileDescriptorErd, []int{3} }

type ShowActivityFilter struct {
	Number     int32 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	SkipNumber int32 `protobuf:"varint,2,opt,name=skip_number,json=skipNumber,proto3" json:"skip_number,omitempty"`
	Order      Order `protobuf:"varint,3,opt,name=order,proto3,enum=erd.Order" json:"order,omitempty"`
}

func (m *ShowActivityFilter) Reset()                    { *m = ShowActivityFilter{} }
func (m *ShowActivityFilter) String() string            { return proto.CompactTextString(m) }
func (*ShowActivityFilter) ProtoMessage()               {}
func (*ShowActivityFilter) Descriptor() ([]byte, []int) { return fileDescriptorErd, []int{4} }

type ObjectID struct {
	Val string `protobuf:"bytes,1,opt,name=val,proto3" json:"val,omitempty"`
}

func (m *ObjectID) Reset()                    { *m = ObjectID{} }
func (m *ObjectID) String() string            { return proto.CompactTextString(m) }
func (*ObjectID) ProtoMessage()               {}
func (*ObjectID) Descriptor() ([]byte, []int) { return fileDescriptorErd, []int{5} }

func init() {
	proto.RegisterType((*CoordinateAndSize)(nil), "erd.CoordinateAndSize")
	proto.RegisterType((*Coordinate)(nil), "erd.Coordinate")
	proto.RegisterType((*Size)(nil), "erd.Size")
	proto.RegisterType((*Activity)(nil), "erd.Activity")
	proto.RegisterType((*ShowActivityFilter)(nil), "erd.showActivityFilter")
	proto.RegisterType((*ObjectID)(nil), "erd.ObjectID")
	proto.RegisterEnum("erd.Order", Order_name, Order_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ActivityService service

type ActivityServiceClient interface {
	Find(ctx context.Context, opts ...grpc.CallOption) (ActivityService_FindClient, error)
}

type activityServiceClient struct {
	cc *grpc.ClientConn
}

func NewActivityServiceClient(cc *grpc.ClientConn) ActivityServiceClient {
	return &activityServiceClient{cc}
}

func (c *activityServiceClient) Find(ctx context.Context, opts ...grpc.CallOption) (ActivityService_FindClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ActivityService_serviceDesc.Streams[0], c.cc, "/erd.ActivityService/find", opts...)
	if err != nil {
		return nil, err
	}
	x := &activityServiceFindClient{stream}
	return x, nil
}

type ActivityService_FindClient interface {
	Send(*ShowActivityFilter) error
	Recv() (*Activity, error)
	grpc.ClientStream
}

type activityServiceFindClient struct {
	grpc.ClientStream
}

func (x *activityServiceFindClient) Send(m *ShowActivityFilter) error {
	return x.ClientStream.SendMsg(m)
}

func (x *activityServiceFindClient) Recv() (*Activity, error) {
	m := new(Activity)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ActivityService service

type ActivityServiceServer interface {
	Find(ActivityService_FindServer) error
}

func RegisterActivityServiceServer(s *grpc.Server, srv ActivityServiceServer) {
	s.RegisterService(&_ActivityService_serviceDesc, srv)
}

func _ActivityService_Find_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ActivityServiceServer).Find(&activityServiceFindServer{stream})
}

type ActivityService_FindServer interface {
	Send(*Activity) error
	Recv() (*ShowActivityFilter, error)
	grpc.ServerStream
}

type activityServiceFindServer struct {
	grpc.ServerStream
}

func (x *activityServiceFindServer) Send(m *Activity) error {
	return x.ServerStream.SendMsg(m)
}

func (x *activityServiceFindServer) Recv() (*ShowActivityFilter, error) {
	m := new(ShowActivityFilter)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ActivityService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erd.ActivityService",
	HandlerType: (*ActivityServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "find",
			Handler:       _ActivityService_Find_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "erd.proto",
}

func (m *CoordinateAndSize) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoordinateAndSize) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Coordinate != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintErd(dAtA, i, uint64(m.Coordinate.Size()))
		n1, err := m.Coordinate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Size_ != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintErd(dAtA, i, uint64(m.Size_.Size()))
		n2, err := m.Size_.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *Coordinate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Coordinate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.X != 0 {
		dAtA[i] = 0xd
		i++
		i = encodeFixed32Erd(dAtA, i, uint32(math.Float32bits(float32(m.X))))
	}
	if m.Y != 0 {
		dAtA[i] = 0x15
		i++
		i = encodeFixed32Erd(dAtA, i, uint32(math.Float32bits(float32(m.Y))))
	}
	return i, nil
}

func (m *Size) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Size) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Width != 0 {
		dAtA[i] = 0xd
		i++
		i = encodeFixed32Erd(dAtA, i, uint32(math.Float32bits(float32(m.Width))))
	}
	if m.Height != 0 {
		dAtA[i] = 0x15
		i++
		i = encodeFixed32Erd(dAtA, i, uint32(math.Float32bits(float32(m.Height))))
	}
	return i, nil
}

func (m *Activity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Activity) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0xd
		i++
		i = encodeFixed32Erd(dAtA, i, uint32(math.Float32bits(float32(m.Id))))
	}
	if m.Datetime != 0 {
		dAtA[i] = 0x15
		i++
		i = encodeFixed32Erd(dAtA, i, uint32(math.Float32bits(float32(m.Datetime))))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintErd(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.AffectedObjectIds) > 0 {
		for _, msg := range m.AffectedObjectIds {
			dAtA[i] = 0x22
			i++
			i = encodeVarintErd(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ShowActivityFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShowActivityFilter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Number != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintErd(dAtA, i, uint64(m.Number))
	}
	if m.SkipNumber != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintErd(dAtA, i, uint64(m.SkipNumber))
	}
	if m.Order != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintErd(dAtA, i, uint64(m.Order))
	}
	return i, nil
}

func (m *ObjectID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectID) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Val) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintErd(dAtA, i, uint64(len(m.Val)))
		i += copy(dAtA[i:], m.Val)
	}
	return i, nil
}

func encodeFixed64Erd(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Erd(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintErd(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CoordinateAndSize) Size() (n int) {
	var l int
	_ = l
	if m.Coordinate != nil {
		l = m.Coordinate.Size()
		n += 1 + l + sovErd(uint64(l))
	}
	if m.Size_ != nil {
		l = m.Size_.Size()
		n += 1 + l + sovErd(uint64(l))
	}
	return n
}

func (m *Coordinate) Size() (n int) {
	var l int
	_ = l
	if m.X != 0 {
		n += 5
	}
	if m.Y != 0 {
		n += 5
	}
	return n
}

func (m *Size) Size() (n int) {
	var l int
	_ = l
	if m.Width != 0 {
		n += 5
	}
	if m.Height != 0 {
		n += 5
	}
	return n
}

func (m *Activity) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 5
	}
	if m.Datetime != 0 {
		n += 5
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovErd(uint64(l))
	}
	if len(m.AffectedObjectIds) > 0 {
		for _, e := range m.AffectedObjectIds {
			l = e.Size()
			n += 1 + l + sovErd(uint64(l))
		}
	}
	return n
}

func (m *ShowActivityFilter) Size() (n int) {
	var l int
	_ = l
	if m.Number != 0 {
		n += 1 + sovErd(uint64(m.Number))
	}
	if m.SkipNumber != 0 {
		n += 1 + sovErd(uint64(m.SkipNumber))
	}
	if m.Order != 0 {
		n += 1 + sovErd(uint64(m.Order))
	}
	return n
}

func (m *ObjectID) Size() (n int) {
	var l int
	_ = l
	l = len(m.Val)
	if l > 0 {
		n += 1 + l + sovErd(uint64(l))
	}
	return n
}

func sovErd(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozErd(x uint64) (n int) {
	return sovErd(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CoordinateAndSize) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoordinateAndSize: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoordinateAndSize: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErd
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinate == nil {
				m.Coordinate = &Coordinate{}
			}
			if err := m.Coordinate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErd
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Size_ == nil {
				m.Size_ = &Size{}
			}
			if err := m.Size_.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Coordinate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Coordinate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Coordinate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.X = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Y = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipErd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Size) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Size: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Size: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Width = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Height = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipErd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Activity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Activity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Activity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Id = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datetime", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Datetime = float32(math.Float32frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffectedObjectIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErd
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AffectedObjectIds = append(m.AffectedObjectIds, &ObjectID{})
			if err := m.AffectedObjectIds[len(m.AffectedObjectIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShowActivityFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: showActivityFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: showActivityFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipNumber", wireType)
			}
			m.SkipNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkipNumber |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= (Order(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipErd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ObjectID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Val = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipErd(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowErd
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthErd
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowErd
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipErd(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthErd = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowErd   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("erd.proto", fileDescriptorErd) }

var fileDescriptorErd = []byte{
	// 460 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x52, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xee, 0xda, 0x4e, 0x49, 0xa6, 0xd0, 0xa6, 0xcb, 0x5f, 0x14, 0x81, 0x1b, 0xf9, 0x64, 0x21,
	0x91, 0x20, 0xc3, 0x95, 0x43, 0x48, 0x8b, 0xc4, 0x05, 0x24, 0xe7, 0xc6, 0x25, 0xb2, 0xbd, 0x13,
	0x7b, 0x21, 0xf6, 0x46, 0xeb, 0x4d, 0xda, 0xf4, 0x0d, 0x78, 0xb3, 0x1e, 0x79, 0x04, 0xc8, 0x93,
	0x20, 0x8f, 0xed, 0x06, 0xc1, 0x6d, 0xbe, 0xbf, 0x9d, 0x6f, 0x2c, 0x43, 0x0f, 0xb5, 0x18, 0xaf,
	0xb5, 0x32, 0x8a, 0xdb, 0xa8, 0xc5, 0xf0, 0x75, 0x2a, 0x4d, 0xb6, 0x89, 0xc7, 0x89, 0xca, 0x27,
	0xa9, 0x4a, 0xd5, 0x84, 0xb4, 0x78, 0xb3, 0x24, 0x44, 0x80, 0xa6, 0x3a, 0x33, 0x74, 0x53, 0xa5,
	0xd2, 0x15, 0x1e, 0x5c, 0x62, 0xa3, 0x23, 0x23, 0x55, 0xd1, 0xe8, 0x17, 0xff, 0xea, 0x46, 0xe6,
	0x58, 0x9a, 0x28, 0x5f, 0xd7, 0x06, 0x2f, 0x81, 0xf3, 0x99, 0x52, 0x5a, 0xc8, 0x22, 0x32, 0x38,
	0x2d, 0xc4, 0x5c, 0xde, 0x22, 0x9f, 0x00, 0x24, 0xf7, 0xe4, 0x80, 0x8d, 0x98, 0x7f, 0x12, 0x9c,
	0x8d, 0xab, 0xa6, 0x07, 0x6f, 0xf8, 0x97, 0x85, 0xbf, 0x04, 0xa7, 0x94, 0xb7, 0x38, 0xb0, 0xc8,
	0xda, 0x23, 0x6b, 0xf5, 0x52, 0x48, 0xb4, 0xe7, 0x03, 0x1c, 0x82, 0xfc, 0x21, 0xb0, 0x1b, 0x7a,
	0xd4, 0x0a, 0xd9, 0x4d, 0x85, 0x76, 0x94, 0xb3, 0x42, 0xb6, 0xf3, 0xde, 0x81, 0x43, 0x0d, 0x9e,
	0x40, 0xe7, 0x5a, 0x0a, 0x93, 0x35, 0xbe, 0x1a, 0xf0, 0x67, 0x70, 0x9c, 0xa1, 0x4c, 0x33, 0xd3,
	0x04, 0x1a, 0xe4, 0xfd, 0x60, 0xd0, 0x9d, 0x26, 0x46, 0x6e, 0xa5, 0xd9, 0xf1, 0x53, 0xb0, 0xa4,
	0x68, 0x72, 0x96, 0x14, 0x7c, 0x08, 0x5d, 0x11, 0x19, 0xac, 0x0e, 0x6f, 0x62, 0xf7, 0x98, 0x73,
	0x70, 0x8a, 0x28, 0xc7, 0x81, 0x3d, 0x62, 0x7e, 0x2f, 0xa4, 0x99, 0xbf, 0x87, 0xc7, 0xd1, 0x72,
	0x89, 0x89, 0x41, 0xb1, 0x50, 0xf1, 0x37, 0x4c, 0xcc, 0x42, 0x8a, 0x72, 0xe0, 0x8c, 0x6c, 0xff,
	0x24, 0x78, 0x44, 0xa7, 0x7d, 0x21, 0xfa, 0xd3, 0x65, 0x78, 0xde, 0x3a, 0x1b, 0x46, 0x94, 0x9e,
	0x02, 0x5e, 0x66, 0xea, 0xba, 0xad, 0xf3, 0x51, 0xae, 0x0c, 0xea, 0xaa, 0x79, 0xb1, 0xc9, 0x63,
	0xd4, 0x54, 0xac, 0x13, 0x36, 0x88, 0x5f, 0xc0, 0x49, 0xf9, 0x5d, 0xae, 0x17, 0x8d, 0x68, 0x91,
	0x08, 0x15, 0xf5, 0xb9, 0x36, 0x8c, 0xa0, 0xa3, 0xb4, 0x40, 0x4d, 0x15, 0x4f, 0x03, 0xa8, 0xf7,
	0x57, 0x4c, 0x58, 0x0b, 0xde, 0x0b, 0xe8, 0xb6, 0x7d, 0x78, 0x1f, 0xec, 0x6d, 0xb4, 0xa2, 0x1d,
	0xbd, 0xb0, 0x1a, 0x5f, 0x0d, 0xa1, 0x43, 0x6e, 0xfe, 0x00, 0xec, 0xe9, 0x7c, 0xd6, 0x3f, 0xe2,
	0x5d, 0x70, 0x2e, 0xaf, 0xe6, 0xb3, 0x3e, 0x0b, 0xae, 0xe0, 0xac, 0xad, 0x39, 0x47, 0xbd, 0x95,
	0x09, 0xf2, 0x00, 0x9c, 0xa5, 0x2c, 0x04, 0x7f, 0x4e, 0x7b, 0xfe, 0x3f, 0x64, 0x58, 0x7f, 0x80,
	0x96, 0xf4, 0xd9, 0x1b, 0xf6, 0xe1, 0xe9, 0xdd, 0x6f, 0xf7, 0xe8, 0x6e, 0xef, 0xb2, 0x9f, 0x7b,
	0x97, 0xfd, 0xda, 0xbb, 0xec, 0xab, 0x9d, 0x62, 0x11, 0x1f, 0xd3, 0x0f, 0xf6, 0xf6, 0x4f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xc8, 0x1e, 0xe3, 0xd2, 0xe2, 0x02, 0x00, 0x00,
}
