// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: entity.proto

package gen

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/types"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// TODO tacogips add other types
type ColumnType int32

const (
	ColumnType_BIT       ColumnType = 0
	ColumnType_TINYINT   ColumnType = 1
	ColumnType_BOOL      ColumnType = 2
	ColumnType_SMALLINT  ColumnType = 3
	ColumnType_MIDIUM    ColumnType = 4
	ColumnType_INT       ColumnType = 5
	ColumnType_INTEGER   ColumnType = 6
	ColumnType_VARCHAR   ColumnType = 7
	ColumnType_CHAR      ColumnType = 8
	ColumnType_DATE      ColumnType = 9
	ColumnType_DATETIME  ColumnType = 10
	ColumnType_TIMESTAMP ColumnType = 11
)

var ColumnType_name = map[int32]string{
	0:  "BIT",
	1:  "TINYINT",
	2:  "BOOL",
	3:  "SMALLINT",
	4:  "MIDIUM",
	5:  "INT",
	6:  "INTEGER",
	7:  "VARCHAR",
	8:  "CHAR",
	9:  "DATE",
	10: "DATETIME",
	11: "TIMESTAMP",
}
var ColumnType_value = map[string]int32{
	"BIT":       0,
	"TINYINT":   1,
	"BOOL":      2,
	"SMALLINT":  3,
	"MIDIUM":    4,
	"INT":       5,
	"INTEGER":   6,
	"VARCHAR":   7,
	"CHAR":      8,
	"DATE":      9,
	"DATETIME":  10,
	"TIMESTAMP": 11,
}

func (x ColumnType) String() string {
	return proto.EnumName(ColumnType_name, int32(x))
}
func (ColumnType) EnumDescriptor() ([]byte, []int) { return fileDescriptorEntity, []int{0} }

// version_id will be used to detect conflict action.
type Entity struct {
	ObjectId  *ObjectID       `protobuf:"bytes,1,opt,name=object_id,json=objectId" json:"object_id,omitempty"`
	Cordinate *Coordinate     `protobuf:"bytes,2,opt,name=cordinate" json:"cordinate,omitempty"`
	Size_     *Size           `protobuf:"bytes,3,opt,name=size" json:"size,omitempty"`
	Columns   []*EntityColumn `protobuf:"bytes,4,rep,name=columns" json:"columns,omitempty"`
	ZIndex    int64           `protobuf:"varint,6,opt,name=z_index,json=zIndex,proto3" json:"z_index,omitempty"`
}

func (m *Entity) Reset()                    { *m = Entity{} }
func (m *Entity) String() string            { return proto.CompactTextString(m) }
func (*Entity) ProtoMessage()               {}
func (*Entity) Descriptor() ([]byte, []int) { return fileDescriptorEntity, []int{0} }

type EntityColumn struct {
	ObjectId *ObjectID          `protobuf:"bytes,1,opt,name=object_id,json=objectId" json:"object_id,omitempty"`
	Idx      int32              `protobuf:"varint,2,opt,name=idx,proto3" json:"idx,omitempty"`
	Name     int32              `protobuf:"varint,3,opt,name=name,proto3" json:"name,omitempty"`
	Type     ColumnType         `protobuf:"varint,4,opt,name=type,proto3,enum=entity.ColumnType" json:"type,omitempty"`
	Attrs    *EntityColumnAttrs `protobuf:"bytes,5,opt,name=attrs" json:"attrs,omitempty"`
}

func (m *EntityColumn) Reset()                    { *m = EntityColumn{} }
func (m *EntityColumn) String() string            { return proto.CompactTextString(m) }
func (*EntityColumn) ProtoMessage()               {}
func (*EntityColumn) Descriptor() ([]byte, []int) { return fileDescriptorEntity, []int{1} }

type EntityColumnAttrs struct {
	AttrEnum   *ColumnAttrEnum   `protobuf:"bytes,1,opt,name=attr_enum,json=attrEnum" json:"attr_enum,omitempty"`
	AttrNumber *ColumnAttrNumber `protobuf:"bytes,2,opt,name=attr_number,json=attrNumber" json:"attr_number,omitempty"`
	AttrString *ColumnAttrString `protobuf:"bytes,3,opt,name=attr_string,json=attrString" json:"attr_string,omitempty"`
}

func (m *EntityColumnAttrs) Reset()                    { *m = EntityColumnAttrs{} }
func (m *EntityColumnAttrs) String() string            { return proto.CompactTextString(m) }
func (*EntityColumnAttrs) ProtoMessage()               {}
func (*EntityColumnAttrs) Descriptor() ([]byte, []int) { return fileDescriptorEntity, []int{2} }

type ColumnAttrEnum struct {
	Vals         []string `protobuf:"bytes,1,rep,name=vals" json:"vals,omitempty"`
	DefaultValue string   `protobuf:"bytes,2,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
}

func (m *ColumnAttrEnum) Reset()                    { *m = ColumnAttrEnum{} }
func (m *ColumnAttrEnum) String() string            { return proto.CompactTextString(m) }
func (*ColumnAttrEnum) ProtoMessage()               {}
func (*ColumnAttrEnum) Descriptor() ([]byte, []int) { return fileDescriptorEntity, []int{3} }

type ColumnAttrString struct {
	Length       int32  `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
	DefaultValue string `protobuf:"bytes,2,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
}

func (m *ColumnAttrString) Reset()                    { *m = ColumnAttrString{} }
func (m *ColumnAttrString) String() string            { return proto.CompactTextString(m) }
func (*ColumnAttrString) ProtoMessage()               {}
func (*ColumnAttrString) Descriptor() ([]byte, []int) { return fileDescriptorEntity, []int{4} }

type ColumnAttrNumber struct {
	Length       int32   `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
	Decimal      int32   `protobuf:"varint,2,opt,name=decimal,proto3" json:"decimal,omitempty"`
	IsUnsigned   bool    `protobuf:"varint,3,opt,name=is_unsigned,json=isUnsigned,proto3" json:"is_unsigned,omitempty"`
	DefaultValue float32 `protobuf:"fixed32,4,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
}

func (m *ColumnAttrNumber) Reset()                    { *m = ColumnAttrNumber{} }
func (m *ColumnAttrNumber) String() string            { return proto.CompactTextString(m) }
func (*ColumnAttrNumber) ProtoMessage()               {}
func (*ColumnAttrNumber) Descriptor() ([]byte, []int) { return fileDescriptorEntity, []int{5} }

type EntityActivity struct {
	Activity *Activity `protobuf:"bytes,1,opt,name=activity" json:"activity,omitempty"`
	Entity   *Entity   `protobuf:"bytes,2,opt,name=entity" json:"entity,omitempty"`
}

func (m *EntityActivity) Reset()                    { *m = EntityActivity{} }
func (m *EntityActivity) String() string            { return proto.CompactTextString(m) }
func (*EntityActivity) ProtoMessage()               {}
func (*EntityActivity) Descriptor() ([]byte, []int) { return fileDescriptorEntity, []int{6} }

func init() {
	proto.RegisterType((*Entity)(nil), "entity.Entity")
	proto.RegisterType((*EntityColumn)(nil), "entity.EntityColumn")
	proto.RegisterType((*EntityColumnAttrs)(nil), "entity.EntityColumnAttrs")
	proto.RegisterType((*ColumnAttrEnum)(nil), "entity.ColumnAttrEnum")
	proto.RegisterType((*ColumnAttrString)(nil), "entity.ColumnAttrString")
	proto.RegisterType((*ColumnAttrNumber)(nil), "entity.ColumnAttrNumber")
	proto.RegisterType((*EntityActivity)(nil), "entity.EntityActivity")
	proto.RegisterEnum("entity.ColumnType", ColumnType_name, ColumnType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EntityService service

type EntityServiceClient interface {
	CreateNewEntity(ctx context.Context, opts ...grpc.CallOption) (EntityService_CreateNewEntityClient, error)
}

type entityServiceClient struct {
	cc *grpc.ClientConn
}

func NewEntityServiceClient(cc *grpc.ClientConn) EntityServiceClient {
	return &entityServiceClient{cc}
}

func (c *entityServiceClient) CreateNewEntity(ctx context.Context, opts ...grpc.CallOption) (EntityService_CreateNewEntityClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EntityService_serviceDesc.Streams[0], c.cc, "/entity.EntityService/CreateNewEntity", opts...)
	if err != nil {
		return nil, err
	}
	x := &entityServiceCreateNewEntityClient{stream}
	return x, nil
}

type EntityService_CreateNewEntityClient interface {
	Send(*CoordinateAndSize) error
	Recv() (*EntityActivity, error)
	grpc.ClientStream
}

type entityServiceCreateNewEntityClient struct {
	grpc.ClientStream
}

func (x *entityServiceCreateNewEntityClient) Send(m *CoordinateAndSize) error {
	return x.ClientStream.SendMsg(m)
}

func (x *entityServiceCreateNewEntityClient) Recv() (*EntityActivity, error) {
	m := new(EntityActivity)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for EntityService service

type EntityServiceServer interface {
	CreateNewEntity(EntityService_CreateNewEntityServer) error
}

func RegisterEntityServiceServer(s *grpc.Server, srv EntityServiceServer) {
	s.RegisterService(&_EntityService_serviceDesc, srv)
}

func _EntityService_CreateNewEntity_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EntityServiceServer).CreateNewEntity(&entityServiceCreateNewEntityServer{stream})
}

type EntityService_CreateNewEntityServer interface {
	Send(*EntityActivity) error
	Recv() (*CoordinateAndSize, error)
	grpc.ServerStream
}

type entityServiceCreateNewEntityServer struct {
	grpc.ServerStream
}

func (x *entityServiceCreateNewEntityServer) Send(m *EntityActivity) error {
	return x.ServerStream.SendMsg(m)
}

func (x *entityServiceCreateNewEntityServer) Recv() (*CoordinateAndSize, error) {
	m := new(CoordinateAndSize)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _EntityService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "entity.EntityService",
	HandlerType: (*EntityServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateNewEntity",
			Handler:       _EntityService_CreateNewEntity_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "entity.proto",
}

func (m *Entity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entity) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ObjectId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEntity(dAtA, i, uint64(m.ObjectId.Size()))
		n1, err := m.ObjectId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Cordinate != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEntity(dAtA, i, uint64(m.Cordinate.Size()))
		n2, err := m.Cordinate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Size_ != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEntity(dAtA, i, uint64(m.Size_.Size()))
		n3, err := m.Size_.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Columns) > 0 {
		for _, msg := range m.Columns {
			dAtA[i] = 0x22
			i++
			i = encodeVarintEntity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ZIndex != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintEntity(dAtA, i, uint64(m.ZIndex))
	}
	return i, nil
}

func (m *EntityColumn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntityColumn) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ObjectId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEntity(dAtA, i, uint64(m.ObjectId.Size()))
		n4, err := m.ObjectId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Idx != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEntity(dAtA, i, uint64(m.Idx))
	}
	if m.Name != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEntity(dAtA, i, uint64(m.Name))
	}
	if m.Type != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEntity(dAtA, i, uint64(m.Type))
	}
	if m.Attrs != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEntity(dAtA, i, uint64(m.Attrs.Size()))
		n5, err := m.Attrs.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *EntityColumnAttrs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntityColumnAttrs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AttrEnum != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEntity(dAtA, i, uint64(m.AttrEnum.Size()))
		n6, err := m.AttrEnum.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.AttrNumber != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEntity(dAtA, i, uint64(m.AttrNumber.Size()))
		n7, err := m.AttrNumber.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.AttrString != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEntity(dAtA, i, uint64(m.AttrString.Size()))
		n8, err := m.AttrString.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *ColumnAttrEnum) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ColumnAttrEnum) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Vals) > 0 {
		for _, s := range m.Vals {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.DefaultValue) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.DefaultValue)))
		i += copy(dAtA[i:], m.DefaultValue)
	}
	return i, nil
}

func (m *ColumnAttrString) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ColumnAttrString) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Length != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEntity(dAtA, i, uint64(m.Length))
	}
	if len(m.DefaultValue) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.DefaultValue)))
		i += copy(dAtA[i:], m.DefaultValue)
	}
	return i, nil
}

func (m *ColumnAttrNumber) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ColumnAttrNumber) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Length != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEntity(dAtA, i, uint64(m.Length))
	}
	if m.Decimal != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEntity(dAtA, i, uint64(m.Decimal))
	}
	if m.IsUnsigned {
		dAtA[i] = 0x18
		i++
		if m.IsUnsigned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DefaultValue != 0 {
		dAtA[i] = 0x25
		i++
		i = encodeFixed32Entity(dAtA, i, uint32(math.Float32bits(float32(m.DefaultValue))))
	}
	return i, nil
}

func (m *EntityActivity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntityActivity) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Activity != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEntity(dAtA, i, uint64(m.Activity.Size()))
		n9, err := m.Activity.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Entity != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEntity(dAtA, i, uint64(m.Entity.Size()))
		n10, err := m.Entity.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func encodeFixed64Entity(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Entity(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintEntity(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Entity) Size() (n int) {
	var l int
	_ = l
	if m.ObjectId != nil {
		l = m.ObjectId.Size()
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.Cordinate != nil {
		l = m.Cordinate.Size()
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.Size_ != nil {
		l = m.Size_.Size()
		n += 1 + l + sovEntity(uint64(l))
	}
	if len(m.Columns) > 0 {
		for _, e := range m.Columns {
			l = e.Size()
			n += 1 + l + sovEntity(uint64(l))
		}
	}
	if m.ZIndex != 0 {
		n += 1 + sovEntity(uint64(m.ZIndex))
	}
	return n
}

func (m *EntityColumn) Size() (n int) {
	var l int
	_ = l
	if m.ObjectId != nil {
		l = m.ObjectId.Size()
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.Idx != 0 {
		n += 1 + sovEntity(uint64(m.Idx))
	}
	if m.Name != 0 {
		n += 1 + sovEntity(uint64(m.Name))
	}
	if m.Type != 0 {
		n += 1 + sovEntity(uint64(m.Type))
	}
	if m.Attrs != nil {
		l = m.Attrs.Size()
		n += 1 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *EntityColumnAttrs) Size() (n int) {
	var l int
	_ = l
	if m.AttrEnum != nil {
		l = m.AttrEnum.Size()
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.AttrNumber != nil {
		l = m.AttrNumber.Size()
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.AttrString != nil {
		l = m.AttrString.Size()
		n += 1 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *ColumnAttrEnum) Size() (n int) {
	var l int
	_ = l
	if len(m.Vals) > 0 {
		for _, s := range m.Vals {
			l = len(s)
			n += 1 + l + sovEntity(uint64(l))
		}
	}
	l = len(m.DefaultValue)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *ColumnAttrString) Size() (n int) {
	var l int
	_ = l
	if m.Length != 0 {
		n += 1 + sovEntity(uint64(m.Length))
	}
	l = len(m.DefaultValue)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *ColumnAttrNumber) Size() (n int) {
	var l int
	_ = l
	if m.Length != 0 {
		n += 1 + sovEntity(uint64(m.Length))
	}
	if m.Decimal != 0 {
		n += 1 + sovEntity(uint64(m.Decimal))
	}
	if m.IsUnsigned {
		n += 2
	}
	if m.DefaultValue != 0 {
		n += 5
	}
	return n
}

func (m *EntityActivity) Size() (n int) {
	var l int
	_ = l
	if m.Activity != nil {
		l = m.Activity.Size()
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.Entity != nil {
		l = m.Entity.Size()
		n += 1 + l + sovEntity(uint64(l))
	}
	return n
}

func sovEntity(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEntity(x uint64) (n int) {
	return sovEntity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Entity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjectId == nil {
				m.ObjectId = &ObjectID{}
			}
			if err := m.ObjectId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cordinate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cordinate == nil {
				m.Cordinate = &Coordinate{}
			}
			if err := m.Cordinate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Size_ == nil {
				m.Size_ = &Size{}
			}
			if err := m.Size_.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Columns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Columns = append(m.Columns, &EntityColumn{})
			if err := m.Columns[len(m.Columns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZIndex", wireType)
			}
			m.ZIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ZIndex |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntityColumn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntityColumn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntityColumn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjectId == nil {
				m.ObjectId = &ObjectID{}
			}
			if err := m.ObjectId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idx", wireType)
			}
			m.Idx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Idx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			m.Name = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Name |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (ColumnType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attrs == nil {
				m.Attrs = &EntityColumnAttrs{}
			}
			if err := m.Attrs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntityColumnAttrs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntityColumnAttrs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntityColumnAttrs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttrEnum", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AttrEnum == nil {
				m.AttrEnum = &ColumnAttrEnum{}
			}
			if err := m.AttrEnum.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttrNumber", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AttrNumber == nil {
				m.AttrNumber = &ColumnAttrNumber{}
			}
			if err := m.AttrNumber.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttrString", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AttrString == nil {
				m.AttrString = &ColumnAttrString{}
			}
			if err := m.AttrString.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ColumnAttrEnum) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ColumnAttrEnum: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ColumnAttrEnum: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vals", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vals = append(m.Vals, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ColumnAttrString) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ColumnAttrString: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ColumnAttrString: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ColumnAttrNumber) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ColumnAttrNumber: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ColumnAttrNumber: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimal", wireType)
			}
			m.Decimal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimal |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsUnsigned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsUnsigned = bool(v != 0)
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultValue", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.DefaultValue = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntityActivity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntityActivity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntityActivity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Activity == nil {
				m.Activity = &Activity{}
			}
			if err := m.Activity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entity == nil {
				m.Entity = &Entity{}
			}
			if err := m.Entity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEntity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEntity
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEntity
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEntity(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEntity = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEntity   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("entity.proto", fileDescriptorEntity) }

var fileDescriptorEntity = []byte{
	// 734 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0xde, 0xa9, 0x1d, 0x27, 0x3e, 0xf9, 0x59, 0x33, 0x82, 0x60, 0x2a, 0x91, 0x46, 0x41, 0x5a,
	0x85, 0x95, 0x36, 0x45, 0xe1, 0x8a, 0x2b, 0xe4, 0xa4, 0x11, 0x58, 0x6a, 0x12, 0x34, 0xf1, 0x56,
	0x82, 0x9b, 0xc8, 0xb1, 0x67, 0xbd, 0x83, 0x62, 0x3b, 0xb2, 0xc7, 0x61, 0x9b, 0x47, 0xe0, 0x11,
	0x78, 0x13, 0xde, 0xa0, 0x12, 0x37, 0x7d, 0x02, 0x04, 0x7d, 0x12, 0x34, 0xe3, 0x49, 0xdb, 0xa4,
	0x45, 0x82, 0xbb, 0xef, 0x7c, 0xdf, 0x77, 0x8e, 0xcf, 0x99, 0x39, 0x1e, 0x68, 0xd0, 0x84, 0x33,
	0x7e, 0x3d, 0xd8, 0x64, 0x29, 0x4f, 0xb1, 0x51, 0x46, 0xa7, 0x6f, 0x22, 0xc6, 0xdf, 0x17, 0xab,
	0x41, 0x90, 0xc6, 0xe7, 0x51, 0x1a, 0xa5, 0xe7, 0x52, 0x5e, 0x15, 0xef, 0x64, 0x24, 0x03, 0x89,
	0xca, 0xb4, 0xd3, 0x4e, 0x94, 0xa6, 0xd1, 0x9a, 0x3e, 0xb8, 0xc2, 0x22, 0xf3, 0x39, 0x4b, 0x13,
	0xa5, 0x9f, 0x1d, 0xeb, 0x9c, 0xc5, 0x34, 0xe7, 0x7e, 0xbc, 0x51, 0x06, 0x93, 0x66, 0x61, 0x09,
	0x7b, 0x7f, 0x20, 0x30, 0x26, 0xb2, 0x0b, 0xfc, 0x1a, 0xcc, 0x74, 0xf5, 0x33, 0x0d, 0xf8, 0x92,
	0x85, 0x36, 0xea, 0xa2, 0x7e, 0x7d, 0xd8, 0x1c, 0x08, 0xe7, 0x5c, 0xb2, 0xee, 0x05, 0xa9, 0x95,
	0xba, 0x1b, 0xe2, 0x37, 0x60, 0x06, 0x69, 0x16, 0xb2, 0xc4, 0xe7, 0xd4, 0x3e, 0x91, 0xde, 0x97,
	0xd2, 0x3b, 0x4e, 0xf7, 0x34, 0x79, 0x70, 0xe0, 0xcf, 0x41, 0xcf, 0xd9, 0x8e, 0xda, 0x9a, 0x74,
	0x9a, 0xd2, 0xb9, 0x60, 0x3b, 0x4a, 0x24, 0x8d, 0x07, 0x50, 0x0d, 0xd2, 0x75, 0x11, 0x27, 0xb9,
	0xad, 0x77, 0xb5, 0x7e, 0x7d, 0xf8, 0xf1, 0x40, 0x9d, 0x53, 0xd9, 0xda, 0x58, 0x8a, 0x64, 0x6f,
	0xc2, 0x9f, 0x42, 0x75, 0xb7, 0x64, 0x49, 0x48, 0x3f, 0xd8, 0x46, 0x17, 0xf5, 0x35, 0x62, 0xec,
	0x5c, 0x11, 0xf5, 0x7e, 0x47, 0xd0, 0x78, 0x9c, 0xf2, 0xbf, 0x66, 0xb2, 0x40, 0x63, 0xe1, 0x07,
	0x39, 0x4d, 0x85, 0x08, 0x88, 0x31, 0xe8, 0x89, 0x1f, 0x97, 0x6d, 0x57, 0x88, 0xc4, 0xf8, 0x15,
	0xe8, 0xfc, 0x7a, 0x43, 0x6d, 0xbd, 0x8b, 0xfa, 0xad, 0x21, 0xde, 0x37, 0x5a, 0x7e, 0xcf, 0xbb,
	0xde, 0x50, 0x22, 0x75, 0x7c, 0x0e, 0x15, 0x9f, 0xf3, 0x2c, 0xb7, 0x2b, 0xf2, 0xab, 0x9f, 0x3d,
	0x37, 0x91, 0x23, 0x0c, 0xa4, 0xf4, 0xf5, 0x6e, 0x11, 0x7c, 0xf4, 0x44, 0xc4, 0xdf, 0x80, 0x29,
	0xe4, 0x25, 0x4d, 0x8a, 0x58, 0x0d, 0xd0, 0x3e, 0xfc, 0xa6, 0xf0, 0x4d, 0x92, 0x22, 0x1e, 0xe9,
	0x37, 0x7f, 0x9e, 0x21, 0x52, 0xf3, 0x55, 0x8c, 0xbf, 0x85, 0xba, 0x4c, 0x4d, 0x8a, 0x78, 0x45,
	0x33, 0x75, 0x4b, 0xf6, 0xd3, 0xe4, 0x99, 0xd4, 0x55, 0x3a, 0xf8, 0xf7, 0xcc, 0x7d, 0x81, 0x9c,
	0x67, 0x2c, 0x89, 0xd4, 0xe5, 0x3d, 0x53, 0x60, 0x21, 0xf5, 0xc7, 0x05, 0x4a, 0xa6, 0xe7, 0x42,
	0xeb, 0xb0, 0x47, 0x71, 0xa2, 0x5b, 0x7f, 0x9d, 0xdb, 0xa8, 0xab, 0xf5, 0x4d, 0x22, 0x31, 0xfe,
	0x02, 0x9a, 0x21, 0x7d, 0xe7, 0x17, 0x6b, 0xbe, 0xdc, 0xfa, 0xeb, 0xa2, 0xdc, 0x27, 0x93, 0x34,
	0x14, 0x79, 0x25, 0xb8, 0xde, 0x1c, 0xac, 0xe3, 0x0f, 0xe2, 0x36, 0x18, 0x6b, 0x9a, 0x44, 0xfc,
	0xbd, 0x3c, 0x98, 0x0a, 0x51, 0xd1, 0x7f, 0x2b, 0xf8, 0x2b, 0x7a, 0x5c, 0x51, 0x4d, 0xfc, 0x6f,
	0x15, 0x6d, 0xa8, 0x86, 0x34, 0x60, 0xb1, 0xbf, 0x56, 0xeb, 0xb1, 0x0f, 0xf1, 0x19, 0xd4, 0x59,
	0xbe, 0x2c, 0x92, 0x9c, 0x45, 0x09, 0x0d, 0xe5, 0x19, 0xd5, 0x08, 0xb0, 0xfc, 0xad, 0x62, 0x9e,
	0x36, 0x23, 0x16, 0xe7, 0xe4, 0xa8, 0x99, 0x00, 0x5a, 0xe5, 0xd5, 0x3b, 0x01, 0x67, 0x5b, 0xf1,
	0x33, 0x7e, 0x09, 0x35, 0x5f, 0xe1, 0x83, 0xbd, 0xdd, 0x1b, 0xc8, 0xbd, 0x8c, 0x5f, 0x81, 0x7a,
	0x47, 0xd4, 0x15, 0xb7, 0x0e, 0x57, 0x8d, 0x28, 0xf5, 0xf5, 0x6f, 0x08, 0xe0, 0x61, 0x4d, 0x71,
	0x15, 0xb4, 0x91, 0xeb, 0x59, 0x2f, 0x70, 0x1d, 0xaa, 0x9e, 0x3b, 0xfb, 0xd1, 0x9d, 0x79, 0x16,
	0xc2, 0x35, 0xd0, 0x47, 0xf3, 0xf9, 0xa5, 0x75, 0x82, 0x1b, 0x50, 0x5b, 0x4c, 0x9d, 0xcb, 0x4b,
	0xc1, 0x6b, 0x18, 0xc0, 0x98, 0xba, 0x17, 0xee, 0xdb, 0xa9, 0xa5, 0x8b, 0x4c, 0x41, 0x56, 0x44,
	0xa6, 0x3b, 0xf3, 0x26, 0xdf, 0x4d, 0x88, 0x65, 0x88, 0xe0, 0xca, 0x21, 0xe3, 0xef, 0x1d, 0x62,
	0x55, 0x45, 0x19, 0x89, 0x6a, 0x02, 0x5d, 0x38, 0xde, 0xc4, 0x32, 0x45, 0x41, 0x81, 0x3c, 0x77,
	0x3a, 0xb1, 0x00, 0x37, 0xc1, 0x14, 0x68, 0xe1, 0x39, 0xd3, 0x1f, 0xac, 0xfa, 0xf0, 0x0a, 0x9a,
	0x65, 0xbb, 0x0b, 0x9a, 0x6d, 0x59, 0x40, 0xf1, 0x04, 0x5e, 0x8e, 0x33, 0xea, 0x73, 0x3a, 0xa3,
	0xbf, 0xa8, 0x07, 0xaa, 0x7d, 0xf4, 0xc2, 0x38, 0x49, 0x28, 0x1e, 0x91, 0xd3, 0xf6, 0xe1, 0xc0,
	0xfb, 0x23, 0xea, 0xa3, 0xaf, 0xd0, 0xe8, 0x93, 0x9b, 0xbf, 0x3b, 0x2f, 0x6e, 0xee, 0x3a, 0xe8,
	0xf6, 0xae, 0x83, 0xfe, 0xba, 0xeb, 0xa0, 0x9f, 0xb4, 0x88, 0x26, 0x2b, 0x43, 0xbe, 0x7e, 0x5f,
	0xff, 0x13, 0x00, 0x00, 0xff, 0xff, 0xa4, 0x22, 0xc3, 0x15, 0x90, 0x05, 0x00, 0x00,
}
