// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: test.proto

/*
Package gen is a generated protocol buffer package.

It is generated from these files:
	test.proto

It has these top-level messages:
	Request
	Response
*/
package gen

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/types"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	Num int64 `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptorTest, []int{0} }

type Response struct {
	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptorTest, []int{1} }

func init() {
	proto.RegisterType((*Request)(nil), "primefactor.Request")
	proto.RegisterType((*Response)(nil), "primefactor.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Factors service

type FactorsClient interface {
	PrimeFactors(ctx context.Context, opts ...grpc.CallOption) (Factors_PrimeFactorsClient, error)
}

type factorsClient struct {
	cc *grpc.ClientConn
}

func NewFactorsClient(cc *grpc.ClientConn) FactorsClient {
	return &factorsClient{cc}
}

func (c *factorsClient) PrimeFactors(ctx context.Context, opts ...grpc.CallOption) (Factors_PrimeFactorsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Factors_serviceDesc.Streams[0], c.cc, "/primefactor.Factors/PrimeFactors", opts...)
	if err != nil {
		return nil, err
	}
	x := &factorsPrimeFactorsClient{stream}
	return x, nil
}

type Factors_PrimeFactorsClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type factorsPrimeFactorsClient struct {
	grpc.ClientStream
}

func (x *factorsPrimeFactorsClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *factorsPrimeFactorsClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Factors service

type FactorsServer interface {
	PrimeFactors(Factors_PrimeFactorsServer) error
}

func RegisterFactorsServer(s *grpc.Server, srv FactorsServer) {
	s.RegisterService(&_Factors_serviceDesc, srv)
}

func _Factors_PrimeFactors_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FactorsServer).PrimeFactors(&factorsPrimeFactorsServer{stream})
}

type Factors_PrimeFactorsServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type factorsPrimeFactorsServer struct {
	grpc.ServerStream
}

func (x *factorsPrimeFactorsServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *factorsPrimeFactorsServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Factors_serviceDesc = grpc.ServiceDesc{
	ServiceName: "primefactor.Factors",
	HandlerType: (*FactorsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PrimeFactors",
			Handler:       _Factors_PrimeFactors_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "test.proto",
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Num != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTest(dAtA, i, uint64(m.Num))
	}
	return i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTest(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func encodeFixed64Test(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Test(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTest(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Request) Size() (n int) {
	var l int
	_ = l
	if m.Num != 0 {
		n += 1 + sovTest(uint64(m.Num))
	}
	return n
}

func (m *Response) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovTest(uint64(m.Result))
	}
	return n
}

func sovTest(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTest(x uint64) (n int) {
	return sovTest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTest
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTest
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTest(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTest = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTest   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("test.proto", fileDescriptorTest) }

var fileDescriptorTest = []byte{
	// 231 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x8f, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x6b, 0x45, 0x6a, 0xd1, 0xc1, 0x80, 0x22, 0x8a, 0x50, 0x90, 0x0c, 0xca, 0xd4, 0x85,
	0x14, 0xc1, 0x13, 0xc0, 0xc0, 0xc4, 0x80, 0x32, 0xb2, 0x25, 0xe5, 0x6a, 0x2c, 0xd5, 0x3e, 0x63,
	0x9f, 0xdf, 0xb1, 0x23, 0x8f, 0x00, 0x79, 0x12, 0x54, 0xc7, 0x08, 0x94, 0xed, 0x3e, 0xdf, 0x67,
	0xfb, 0xff, 0x01, 0x18, 0x03, 0x37, 0xce, 0x13, 0x53, 0x79, 0xec, 0xbc, 0x36, 0xb8, 0xed, 0x36,
	0x4c, 0xbe, 0xba, 0x51, 0x9a, 0xdf, 0x63, 0xdf, 0x6c, 0xc8, 0xac, 0x15, 0x29, 0x5a, 0x27, 0xa7,
	0x8f, 0xdb, 0x44, 0x09, 0xd2, 0x34, 0xde, 0xad, 0xa4, 0x22, 0x52, 0x3b, 0xfc, 0xb3, 0xde, 0xa2,
	0xef, 0x58, 0x93, 0xcd, 0xfb, 0xab, 0xe9, 0x9e, 0xb5, 0xc1, 0xc0, 0x9d, 0x71, 0xa3, 0x50, 0x5f,
	0xc2, 0xa2, 0xc5, 0x8f, 0x88, 0x81, 0xcb, 0x53, 0x28, 0x6c, 0x34, 0x17, 0xe2, 0x5a, 0xac, 0x8a,
	0xf6, 0x30, 0xd6, 0x35, 0x1c, 0xb5, 0x18, 0x1c, 0xd9, 0x80, 0xe5, 0x39, 0xcc, 0x3d, 0x86, 0xb8,
	0xe3, 0x2c, 0x64, 0xba, 0x7b, 0x86, 0xc5, 0x53, 0x8a, 0x1e, 0xca, 0x07, 0x38, 0x79, 0x39, 0x54,
	0xf9, 0xe5, 0xb3, 0xe6, 0x5f, 0xb3, 0x26, 0x7f, 0x53, 0x2d, 0x27, 0xa7, 0xe3, 0xfb, 0xf5, 0x6c,
	0x25, 0x6e, 0xc5, 0xe3, 0x72, 0xff, 0x2d, 0x67, 0xfb, 0x41, 0x8a, 0xcf, 0x41, 0x8a, 0xaf, 0x41,
	0x8a, 0xd7, 0x42, 0xa1, 0xed, 0xe7, 0x29, 0xec, 0xfd, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe0,
	0x68, 0xbf, 0x2c, 0x37, 0x01, 0x00, 0x00,
}
